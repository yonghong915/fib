null = {0} is NULL!
config.null = {0}:{1} is NULL!
blank = {0} is Blank!
config.blank = {0}:{1} is Blank!
reduplicate = {0} is Reduplicated!
inputParameter.null = input parameter {0} is NULL!
parameter.null = parameter {0} is NULL!
parameter.blank = parametre {0} is Blank!
type.unsupport = Unsupport Type[{0}]!
time.unsupport = Unsupported Time[{0}]!
count.zero = {0}'s count is zero!
onceRead.-1 = onceRead = -1, remote socket maybe be closed!
onceRead.0 = onceRead = 0, remote socket maybe be closed!
ConnectionConfig.getTypeByText.connectionType.unsupport = Unsupport Connection Type[{0}]!
ConnectionConfig.directionType.unsupport = Unsupport Direction Type[{0}]!
ProcessorRule.getRequestMessageFromByText.requestMessageFrom.unkown = Unkown request-message-from :{0}
propery.canNotLoadFile = Can't load {0}
script.BeanShell.setParameters.failed = set parameters to BeanShell Interpreter failed!Exception is {0}
script.executeScript.failed = execute Script failed!Exception is {0}
RouteRule.determine.type.notDynamic = RouteRule[{0}]'s type is not {1}
ChannelConfig.getModeByText.mode.unsupport = Unsupport Mode :{0}
ChannelConfigParser.checkEventHandler.eventHandler.canNotFind = Can't find event-handler[{0}]!
ChannelConfigParser.checkRouteRule.destChannelSymbol.null = RouteRule[{0}]'s dest-channel-symbol is null!
ChannelConfigParser.checkRouteRule.destChannelSymbol.notExist = RouteRule[{0}]'s dest-channel-symbol[{1}] doesn't exist!
ChannelConfigParser.checkRouteRule.expression.null = RouteRule[{0}]'s expression is null!
ChannelConfigParser.checkRouteRule.determination.null = RouteRule[{0}]'s determination is null!
ChannelConfigParser.checkProcessor.routeRule.notExist = processor[{0}]'s route-rule[{1}] doesn't exist!
ChannelConfigParser.checkProcessor.errorMessage.null = processor[{0}]{{1}}'s error-message-transformer is null!But error-code-set is not empty!
ChannelConfigParser.checkProcessor.errorMapping.null = processor[{0}]'s error-mapping is NULL!
ChannelConfigParser.checkProcessor.requestMessage.sourceMessageId.null = processor[{0}]({1})'s request-message-transformer/@source-message-id is null!
ChannelConfigParser.checkProcessor.requestMessage.destMessageId.null = processor[{0}]({1})'s request-message-transformer/@dest-message-id is null!
ChannelConfigParser.checkProcessor.requestMessage.beanMapping.null = processor[{0}]({1})'s request-message-transformer/@bean-mapping is null!
ChannelConfigParser.checkProcessor.responseMessage.null = processor[{0}]({1})'s response-message-transformer is null!
ChannelConfigParser.checkProcessor.responseMessage.sourceMessageId.null = processor[{0}]({1})'s response-message-transformer/@source-message-id is null!
ChannelConfigParser.checkProcessor.responseMessage.beanMapping.null = processor[{0}]({1})'s response-message-transformer/@bean-mapping is null!
ChannelConfigParser.checkProcessor.errorMessage.beanMapping.null = processor[{0}]({1})'s error-message-transformer/@bean-mapping is null!
ChannelConfigParser.checkProcessor.responseMessage.destMessageId.null = processor[{0}]({1})'s response-message-transformer/@dest-message-id is null!
ChannelConfigParser.checkProcessor.requestHandler.null = processor[{0}]({1})'s request-message-handler is null!
ChannelConfigParser.checkProcessor.sourceAsyncAndDestAsync.same = Processor[{0}]'s source-async and dest-async must be the same while Processor's Type is {1}
ChannelConfigParser.checkProcessor.job.processor.notExist = Job's processor[{0}] is not exist!Channel Id[{1}], Processor Id[{2}]
ChannelConfigParser.checkProcessor.returnCodeRecognizer.recognizerId.notExist = return-code-recognizer's recognizer-id[{0}] doesn't exist!
ChannelConfigParser.checkProcessor.returnCodeRecognizer.errorCode.in.successCode = return-code-recognizer's error-code[{0}] has already in success-code-set!
ChannelConfigParser.checkProcessor.messageTypeRecognizer.recognizerId.notExist = message-type-recognizer's recognizer-id[{0}] doesn't exist!
ChannelConfigParser.checkProcessor.messageType.processor.notExist = message-type[{0}]'s processor[{1}] doesn't exist!
ChannelConfigParser.parseCase.processor.isNotInTable = processor[{0}] is NOT exist in processor table
ChannelConfigParser.parseEvent.event.count.zero = count(<event-set>/<event>) should more than zero while <event>/@type is NULL or Blank!
ChannelConfigParser.parseActionConfig.action.class.null = {0} must be not NULL while <action>/@type is "{1}"
ChannelConfigParser.checkProcessor.transmit.messageHandler.notNull = processor[{0}]{{1}}'s request-message-handler or response-message-handler or error-message-handler must all NULL when processor's type is {2}!
ChannelConfigParser.checkProcessorId.length = process-id[@value={0}]'s length must be less than 80!
ConnectorConfig.channelType.unsupport = Unsupport Channel Type :{0}
HTTPClientChannel.sendRequestMessage.noHandler = activeCount={0}. There has no handler to send request message!
HTTPClientChannel.sendRequestMessage.createParameter.failed = create paramters failed!
HTTPClientChannel.sendResponseMessage.error = HTTPClientChannel [{0}] can't send response message!
HTTPClientHandler.run.createMethod.error = create PostMethod and add Parameters error! Parameters :{0}
HTTPClientHandler.run.connect.error = connect error!
HTTPClientHandler.run.communicate.error = communicate error!
HTTPClientHandler.endElement.url.format.invalidate = {0}: url[{1}]'format is not valid!Exception is {2}
calculateMessageLength.lengthField.dataType.unsupport = Unsupport Message Length Field Data Type:{0}
LengthCheckReader.parseParameters.dataType.wrong = parameter {0} is wrong! Unsupport Data Type[{1}]! data type must be num/int/net-int/short/net-short/byte
LengthCheckReader.parseParameters.lengthEqual4 = {0} is int, {1} must be 4!
LengthCheckReader.parseParameters.lengthEqual1 = {0} is byte, {1} must be 1!
LengthCheckReader.parseParameters.lengthEqual2 = {0} is short, {1} must be 2!
message.beforeFilter = message before filter[{0}]:\n{1}
message.afterFilter = message after filter[{0}]:\n{1}
AbstractReader.read.partMessage = read partial message : onceRead = {0} hasRead={1} hasReadMessage:\n{2}
LongConnectionSocketChannel.connect.invalidate = Connection isn't available
LongConnectionSocketChannel.internalStart.login.failed.1 = login failed!Channel Id is "{0}"
LongConnectionSocketChannel.internalStart.login.failed.2 = login failed!Channel Id is "{0}", Exception is {0}
LongConnectionSocketChannel.internalStart.login.success = Login success or not need login.
ClientConnection.toString = ClientConnection : id[{0}] connect[{1}] direction[{2}] address[{3}:{4}]
ServerConnection.toString = ServerConnection : id[{0}] connect[{1}] direction[{2}] listenPort[{3}]
ServerConnection.toString.socket = remote[{0}]
ReceiveHandler.responseMessage.unmatched = \n****************** Unmatched Response Message ******************\nreferenceNumber = [{0}]\nmessage =\n{1}\n**************************************************************
WaitQueueMonitor.timeout = Receive Responese Message Timeout!
LongConnectionSocketChannelConfigParser.configCheck.connection.zero = {0}: <connection> number is zero!
LongConnectionSocketChannelConfigParser.configCheck.connection.tooMany = {0}: too many <connection>! :{1}
LongConnectionSocketChannelConfigParser.configCheck.connection.direction.double = {0}: only one <connection>, its communicate direction must be "double"!
LongConnectionSocketChannelConfigParser.configCheck.connection.direction.opposite = {0}: two <connection>! each <connection>'s communicate direction must be opposite!
LongConnectionSocketChannelConfigParser.configCheck.connection.direction.notDouble = {0}: two <connection>! their communicate direction can't be "double"!
LongConnectionSocketChannelConfigParser.configCheck.heartbeat.connection.notDouble = {0}: hearbeat's communicate direction can't be "double"!
LongConnectionSocketChannelConfigParser.configCheck.heartbeat.connection.direction.send = {0}: hearbeat's direction is "send", its @interval must be set!
LongConnectionSocketChannelConfigParser.configCheck.heartbeat.connection.responseConnection.notExist = {0}: hearbeat's response-connection[{1}] doesn't exist!
LongConnectionSocketChannelConfigParser.configCheck.heartbeat.messageSymbol.notExist = {0}: hearbeat's message-symbol[{1}] can't be found in message-symbol-table!
LongConnectionSocketChannelConfigParser.configCheck.requestSerialNumberRecognizer.null = {0}: RequestSerialNumberRecognizer is NULL!Please check <request-serial-number-recognizer>
LongConnectionSocketChannelConfigParser.configCheck.requestSerialNumberRecognizer.unkownId = {0}: Unkown request-serial-number-recognizer! Can't find this id[{1}] in Channel[{2}]'s <recognizer-table>
LongConnectionSocketChannelConfigParser.configCheck.responseSerialNumberRecognizer.null = {0}: ResponseSerialNumberRecognizer is NULL!Please check <response-serial-number-recognizer>
LongConnectionSocketChannelConfigParser.configCheck.responseSerialNumberRecognizer.unkownId = {0}: Unkown response-serial-number-recognizer! Can't find this id[{1}] in Channel[{2}]'s <recognizer-table>
LongConnectionSocketChannelConfigParser.configCheck.codeRecognizer.null = {0}: CodeRecognizer is NULL!Please check <code-recognizer>
LongConnectionSocketChannelConfigParser.configCheck.codeRecognizer.requestCodeSetAndResponseCodeSet.empty = {0}: Both CodeRecognizer's request-code-set and response-code-set is empty!
LongConnectionSocketChannelConfigParser.configCheck.codeRecognier.unkownId = {0}: Unkown code-recognizer! Can't find this id[{1}] in Channel[{2}]'s <recognizer-table>
LongConnectionSocketChannelConfigParser.configCheck.loginConfig.null = {0}: LoginConfig is null! Please check <login>!
LongConnectionSocketChannelConfigParser.configCheck.class.notFound = Can't find class[{0}]!Exception is {1}
LongConnectionSocketChannelConfigParser.configCheck.receiveConnection.needPort = {0}: RECEIVE Connection[{1}] must have 'port' attribute!
LongConnectionSocketChannelConfigParser.configCheck.sendConnection.needServerAddress = {0}: SEND Connection[{1}] must have 'server-address' attribute!
LongConnectionSocketChannelConfigParser.configCheck.sendConnection.serverAddress.wrong = {0}: SEND Connection[{1}] 's 'server-address'[{2}] is wrong!Exception is {3}
LongConnectionSocketChannelConfigParser.configCheck.sendConnection.needPort = {0}: SEND Connection[{1}] must have 'port' attribute!
LongConnectionSocketChannelConfigParser.hexStrCheck.notHexString.1 = string[{0}]'s length is odd number, it isn't a hex string!
LongConnectionSocketChannelConfigParser.hexStrCheck.notHexString.2 = string[{0}] contains invalid char[{1}], it isn't a hex string!
ISO8583MessageRecognizer.recognize.allNull = Both field-list and expression is NULL!
ISO8583MessageRecognizer.recognize.message.notExist = message[GroupId={0}, Messageid={1}] is not exist!"
SeparatorMessageRecognizer.recognize.separator.notFound = Can not find separator[{0}], index[{1}]
SeparatorMessageRecognizer.recognize.fieldIndex.lessThan1 = field-index start from 1!index is {0},Must NOT less than 1!
index.lessThan0 = parameter {0} must be >=0!
XPathRecognizer.recognize.message.tooShort.1 = message too short! xmlStartAt[{0}] >= message.length[{1}]
XPathRecognizer.recognize.message.tooShort.2 = message too short! xmlLength = message.length - xmlStartAt - xmlEndOffset = {0}
XPathRecognizer.charset.illegal = Illegal Charset {0} !Exception is {1}
MQChannelConfigParser.configCheck.count.moreThan2 = {0}'s count is too big!2 at most!
MQChannelConfigParser.configCheck.count.equal1 = {0}'s count is 1 but <mq-channel>/@type is not "double"!
MQChannelConfigParser.configCheck.type.notDouble = {0}'s <mq-channel>/@type is "double" but <code-recognizer> is null!
MQChannelConfig.queueType.unsupport = Unsupported queue type: {0}!It must be 'send' or 'receive' or 'double'!
MQChannelConfig.type.unsupport = Unsupported type: {0}!It must be 'server' or 'client'!
MQClientChannel.sendResponseMessage.error = MQClientChannel[{0}] can NOT Send Response Message!
MQChannel.shutDown.sendQueue.error = Shut Down Send Queue ERROR!
MQChannel.shutDown.sendManager.error = Shut Down Send Manager ERROR!
MQChannel.shutDown.receiveQueue.error = Shut Down Receive Queue ERROR!
MQChannel.shutDown.receiveManager.error = Shut Down Receive Manager ERROR!
MQChannel.shutDown.channel.error = Shut Down MQ Channel ERROR!
MQChannel.start.config.null = Config is NULL,Please Load Config First!
MQChannel.start.QueueConfig.notFount = Can NOT Find Any MQ Queue Config!Please Check!
MQClientChannel.start.config.type.wrong = Config Type is NOT "client"
MQClientChannel.start.sendQueueConfig.notFound = Can NOT Find Send Queue Config!Please Check!
MQChannel.start.sendQueueManager.connect.error = Connect to Send Queue Manager ERROR!
MQChannel.start.sendQueue.connect.error = Connect to Send Queue ERROR!
MQChannel.start.receiveQueueManager.connect.error = Connect to Receive Queue Manager ERROR!
MQChannel.start.receiveQueue.connect.error = Connect to Receive Queue ERROR!
MQChannel.getQueueConfigByType.quueType.unkown = Unkown queue type, must be 'send' or 'receive'!
MQChannel.MQMessage.write.error = MQ Message Write ERROR!
MQChannel.putMessage.error = Put Message into Queue ERROR!
MQClientChannel.MQsendThread.sendRequest.success = Send Request Message, message id : \n{0}\nrequest message : \n{1}
MQChannel.getQueueDepth.error = Get Receive Queue's Current Depth ERROR!
MQChannel.getMessage.error = Get Message From Receive Queue ERROR!
MQChannel.readMessage.error = Read Message ERROR!
MQClientChannel.MQreceiveThread.receiveMessage.requestMessage.notFound = NO Request Message Found for Receive Message, receive message id : \n{0}
MQClientChannel.MQreceiveThread.waitResponse.timeout = Wait for Response timeout, request message : \n{0}
MQClientChannel.MQreceiveThread.receiveResponse.success = Receive Response Message, message id : \n{0}\nresponse message : \n{1}
MQServerChannel.sendRequestMessage.error = MQServerChannel[{0}] can NOT Send Request Message!
MQServerChannel.start.config.type.wrong = Config Type is NOT "server"!
MQServerChannel.start.receiveQueueConfig.notFound = Can NOT Find Receive Queue Config!Please Check!
MQServerChannel.MQreceiveThread.receiveRequest = Receive Request Message, request message : \n{0}
MQServerChannel.MQsendThread.sendResponse = Send Response Message, response message : \n{0}
LengthCheckReader.messageLengthField.dataType.unsupport = Unsupport Message Length Field Data Type:{0}
Reader.dataType.unsupport = parameter {0} is wrong! Unsupport Data Type[{1}]! data type must be num/int/net-int/short/net-short/byte
SocketClientChannelConfigParser.configCheck.type.mustClient = SocketClientChannel's 'type' attribute must be 'client'!
SocketClientChannelConfigParser.configCheck.serverAddress.mustHave = SocketServerChannel must have 'server-address' attribute!
SocketClientChannelConfigParser.configCheck.serverAddress.wrong = SocketServerChannel's 'server-address'[{0}] is wrong!Exception is {1}
SocketChannelConfigParser.configCheck.port.mustHave = SocketServerChannel must have 'port' attribute!
SocketChannelConfigParser.configCheck.class.notFound = Can't find class[{0}]!Exception is {1}
SocketServerChannelConfigParser.configCheck.type.mustServer = SocketServerChannel's 'type' attribute must be 'server'!
SocketServerChannelConfigParser.configCheck.backlog.mustHave = SocketServerChannel must have 'backlog' attribute!
LengthCheckNioReader.checkMessageComplete.info = messageLength={0} offset={1} hasRead={2}
AbstractNioReader.read.partialMessage.read = read partial message : onceRead = {0} hasRead={1} onceReadMessage:\n{2}
AbstractNioWriter.write.hasWrite = onceWrite={0} hasWrite={1}
SocketClientChannel.sendResponseMessage.canNotSend = SocketClientChannel [{0}] can't send response message!
SocketChannel.selector.select.error = Selector.select() exception!
SocketChannel.selector.crashed = Selector crashed!
SocketChannel.key.invalid = key[{0}] is invalid!
SocketChannel.handleKey.error = handleKey exception!
SocketChannel.channel.crashed = Channel crashed!
SocketChannel.selector.open.error = Open Selector failed!
SocketChannel.connect.failed = connect failed!
SocketChannel.write.failed = writer.write failed!
SocketClientChannel.handleKey.sendRequest.success = send request message :\n{0}
SocketChannel.read.failed = reader.read failed!From {0}
SocketClientChannel.handleKey.receiveResponse.success = receive response message :\n{0}
SocketServerChannel.handleKey.serverSocket.open.failed = Open ServerSocket failed!
SocketServerChannel.handleKey.invalid = ServerSocketChannel is invalid!
SocketServerChannel.handleKey.accept.error = accept error!
SocketServerChannel.handleKey.register.error = register channel error!
SocketServerChannel.handleKey.receiveRequest.success = receive request message :\n{0}
SocketServerChannel.handleKey.receiveRequest.success.1 = from {0} receive request message :\n{1}
SocketServerChannel.handleKey.sendResponse.success = send response message :\n{0}
Channel.toString = {0} type[{1}] class[{2}]
libPath.notExist = libPath[{0}] doesn't exist!
libPath.notDirectory = libPath[{0}] is not a directory!
libPath.canNotRead = libPath[{0}] can not be read!
AppendableURLClassloader.getAllJarUrl.listJar.error = list jar[{0}] error!Exception is {1}
ChannelMainConfig.toString = Channel id[{0}] name[{1}] startup[{2}] deploy[{3}]
DefaultEventHandler.sendResponse.failed = Send Response Message Failed!
DefaultEventHandler.parseSourceRequest.error = Parse SourceRequest Message Error!SourceChannelId[{0}],ProcessorId[{1}],Exception[{2}]
DefaultEventHandler.requestMappingError = Mapping Error!From Source Request MessageObject To Destination Request MessageObject.SourceChannelId[{0}], ProcessorId[{1}], MappingRuleId[{2}], Exception[{3}]
DefaultEventHandler.packSourceResponse.error = Pack Source Response Message Error!SourceChannelId[{0}], Processor[{1}], Exception[{2}]
DefaultEventHandler.returnCodeRecognize.error = Recognize Return Code Error!SourceChannelId[{0}], ProcessorId[{1}], Exception[{2}]
DefaultEventHandler.returnCodeRecognize.unkownReturnCode = Unkown Return Code: {0}!
DefaultEventHandler.returnCodeRecognize.returnCodeRecognizeNotExist = ErrorMessageTransformer is not exist!
DefaultEventHandler.parseDestResponse.error = Parse Destination Response Message Error!SourceChannelId[{0}], Processor[{1}], Exception[{2}]
DefaultEventHandler.responseMappingError = Mapping Error!From Destination Response MessageObject To Source Response MessageObject.SourceChannelId[{0}], ProcessorId[{1}], MappingRuleId[{2}], Exception[{3}]
DefaultEventHandler.packSourceResponse.error = Pack Source Response Message Error!SourceChannelId[{0}], Processor[{1}], Exception[{2}]
DefaultEventHandler.createSession.error = Create Session Error!SourceChannelId[{0}], Exception[{1}]
DefaultEventHandler.messageTypeRecognize.error = Recognize Message Type Error!SourceChannelId[{0}], Exception[{1}]
DefaultEventHandler.messageTypeRecognize.unkownMessageType = Unkown Message Type[{0}]!SourceChannelId[{1}]
DefaultEventHandler.dynamicRouteRule.determination.null = Dynamic Route's Determination is NULL!
DefaultEventHandler.dynamicRouteRule.determine.error = Determine From Dynamic Route Error!SourceChannelId[{0}], ProcessorId[{1}], Exception[{2}]
DefaultEventHandler.sourceRequestHandle.error = Source Request Message handle Error!SourceChannelId[{0}], ProcessorId[{1}], Exception[{2}]
DefaultEventHandler.packDestRequest.error = Pack Destination Request Message Error!SourceChannelId[{0}], ProcessorId[{1}], Exception[{2}]
DefaultEventHandler.dataType.unkown = Unkown Data Type!Must be MessageBean or Map
DefaultEventHandler.request.handler.error = Request Message handle Error!SourceChannelId[{0}], ProcessorId[{1}], Exception[{2}]
DefaultEventHandler.response.handler.error = Response Message handle Error!SourceChannelId[{0}], ProcessorId[{1}], Exception[{2}]
Event.getEventTypeText.accept.error = Accept Error
Event.getEventTypeText.receiveRequest.error = Request Receive Error
Event.getEventTypeText.receiveResponse.error = Response Receive Error
Event.getEventTypeText.sendRequest.error = Request Send Error
Event.getEventTypeText.sendResponse.error = Response Send Error
Event.getEventTypeText.connect.error = Connect Error
Event.getEventTypeText.requestArrived = Request Arrived
Event.getEventTypeText.responseArrived = Response Arrived
Event.getEventTypeText.responseSent = Response Sent
Event.getEventTypeText.requestSent = Request Sent
Event.getEventTypeText.unkownException = Unknown Exception
Event.getEventTypeText.fatalError = Fatal Error
Event.toString.eventAt = ------------------ Event At  {0} ------------------
Event.toString.eventType = eventType = {0}
Event.toString.sourceChannel = sourceChannel = {0}
Event.toString.source = source = {0}
Event.toString.requestMessage = requestMessage = \n{0}
Event.toString.responseMessage = responseMessage = \n{0}
Event.toString.exception = exception = {0}
EventHandlerThread.sendRequest.error = Request Message Send Error!SourceChannel[{0}]
EventHandlerThread.connectDest.error = Connect to Destination Error!Destination Channel[{0}]
EventHandlerThread.receiveResponse.error = Reponse Message Receive Error!Destination Channel[{0}]
EventHandlerThread.exception = Some Exception Occurred!
TimeExpressionParser.buildExpression.parseMonth.error = Support for specifying 'L' and 'LW' with other days of the month is not implemented
TimeExpressionParser.buildExpression.parseWeek.error = Support for specifying 'L' with other days of the week is not implemented
TimeExpressionParser.buildExpression.expression.unexpectedEnd = Unexpected end of expression.
TimeExpressionParser.buildExpression.parseMonthOrWeek.error = Support for specifying both a day-of-week AND a day-of-month parameter is not implemented.
TimeExpressionParser.buildExpression.expression.illegalFormat = Illegal time expression format[{0}]
TimeExpressionParser.storeExpressionVals.monthValue.invalid = Invalid Month value[{0}]
TimeExpressionParser.storeExpressionVals.dayOfWeek.invalid = Invalid Day-of-Week value[{0}]
TimeExpressionParser.numbericValue.mustFollow = A numeric value between 1 and 5 must follow the '#' option
TimeExpressionParser.storeExpressionVals.illegalCharacter.1 = Illegal characters for this position[{0}]
TimeExpressionParser.storeExpressionVals.illegalCharacter.2 = Illegal character after '?': {0}
TimeExpressionParser.storeExpressionVals.specialSymbol.1 = '?' can only be specified for Day-of-Month or Day-of-Week.
TimeExpressionParser.storeExpressionVals.specialSymbol.2 = '/' must be followed by an integer.
TimeExpressionParser.storeExpressionVals.unexpectedEnd = Unexpected end of string.
TimeExpressionParser.storeExpressionVals.increment.greaterThan60 = Increment[{0}] > 60
TimeExpressionParser.storeExpressionVals.increment.greaterThan24 = Increment[{0}] > 24
TimeExpressionParser.storeExpressionVals.increment.greaterThan31 = Increment[{0}] > 31
TimeExpressionParser.storeExpressionVals.increment.greaterThan7 = Increment[{0}] > 7
TimeExpressionParser.storeExpressionVals.increment.greaterThan12 = Increment[{0}] > 12
TimeExpressionParser.storeExpressionVals.character.unexpected = Unexpected character: {0}
TimeExpressionParser.checkNext.LOption.notValid = 'L' option is not valid here. index = {0}
TimeExpressionParser.checkNext.WOption.notValid = 'W' option is not valid here. index = {0}
TimeExpressionParser.checkNext.Option.notValid = '#' option is not valid here. index = {0}
TimeExpressionParser.checkNext.character.unexpected = Unexpected character '{0}' after '/'
TimeExpressionParser.addToSet.minuteAndSecondValue.between0And59 = Minute and Second values must be between 0 and 59
TimeExpressionParser.addToSet.hourValue.between0And23 = Hour values must be between 0 and 23
TimeExpressionParser.addToSet.dayOfMonth.between1And31 = Day of month values must be between 1 and 31
TimeExpressionParser.addToSet.monthValue.between1And12 = Month values must be between 1 and 12
TimeExpressionParser.addToSet.dayOfWeek.between1And7 = Day-of-Week values must be between 1 and 7
TimeExpressionParser.addToSet.startYear.mustLessThan.stopYear = Start year must be less than stop year
TimeExpressionParser.addToSet.unexpectedType = Unexpected type encountered
TimeExpressionParser.getTimeAfter.operation.unsupport = Support for specifying both a day-of-week AND a day-of-month parameter is not implemented.
TimeExpressionParser.getLastDayOfMonth.month.illegal = Illegal month number: {0}
TimeExpressionParser.clone.notCloneable = Not Cloneable.
CommunicateJob.init.noCommLog = Communicate Job[{0}] Execute Error!No CommLog in table comm_log with this log_id[{1}]!
CommunicateJob.businessLogic.sourceChannel.notFound = Communicate Job[{0}] Execute Error!Source Channel can not be found, Channel Id:{1}
CommunicateJob.businessLogic.processor.null = Communicate Job[{0}] Execute Error!Source Processor can not be found, Channel Id:{1}, Processor Id :{2}
CommunicateJob.businessLogic.processorRule.null = Communicate Job[{0}] Execute Error!Processor doesn't have <processor-rule>, Processor:{1}, SourceChannelId :{2}
CommunicateJob.businessLogic.message.null = Communicate Job[{0}] Execute Error!Request Message is NULL!
CommunicateJob.businessLogic.determination.null = Dynamic Route's Determination is NULL!
LocalJobDelegator.businessLogic.className.null = Local Job Class Name is NULL!
AbstractJob.caculateNextFireTime.currentJob.null = Current Job is NULL!Caculate Next Fire Time Error!
AbstractJob.caculateNextFireTime.scheduleType.unkown = Unkown Schedule Type!
AbstractJob.terminate.currentJob.null = Current Job is NULL!Terminate Job Error!
AbstractJob.terminate.error = Terminate Job[{0}] Error!
AbstractJob.cancel.error = Cancel Job[{0}] Error!
AbstractJob.cancel.currentJob.null = Current Job is NULL!Cancel Job Error!
AbstractJob.run.currentJob.null = Current Job is NULL!Run Job Error!
AbstractJob.run.getJobLogId.error = Get JOB_LOG id Error!
AbstractJob.run.businessLogic.execute.error = Execute Job's Business Logic Error!
AbstractJob.run.runJob.error = Run Job Error!Exception is {0}
AbstractJob.getTimeByTimeRule.expression.null = Time Expression is NULL!
AbstractJob.getTimeByTimeRule.expression.blank = Time Expression is Blank!
AbstractJob.getTimeByTimeRule.parseExpression.error = Parse Expression Error!Exception is {0}
JobManager.loadAndScheduleJob.getJobAlive.error = Get Job Alive Error!
JobManager.loadAndScheduleJob.scheduleJob.error = Schedule Job[{0}] Error!
JobManager.addJobSchedule.job.null = Job is NULL!Can not schedule it!
Task.run.job.null = Job is NULL!
timer.null = Timer is NULL!
TaskExecutor.run.task.null = Task is NULL!
TaskExecutor.run.error = Task Run Error!Exception is {0}
MapClient.receive.readLength.failed = Read message length failed! hasRead = {0}
MapClient.receive.readMsg.failed = Read Socket Failed! The Connection maybe closed by remote side! onceRead = {0}
FieldMappingRule.toString.1 = FieldMappingRule[type={0},from={1},to={2}
FieldMappingRule.toString.2 = ,targetType={0}
FieldMappingRule.toString.3 = ,forceTypeConversion
MappingRule.getClassTypeByText.unkownSource = Unkown Source/Target Object Type[{0}]!
MappingRuleManager.loadMappingConfig.path.notDirectory = path[{0}] must be a directory!
MappingRuleManager.loadMappingConfig.path.canNotRead = path[{0}] can not be read!
MappingRuleManager.loadMappingConfig.id.reduplicate = {0}: Mapping Rule Id is reduplicated! Id={1}
MappingRuleManager.getMappingRule.group.null = group[{0}] is null! please load it first!
MappingRuleManager.translateRuleId.blank = {0} is Blank,type=value-mapping-translate
MappingRuleManager.notTranslateRule = {0} is not a value-translate-rule perhaps! 
MappingRuleManager.id.notEqual = {0}'s id[{1}] != {2}
MappingRuleManager.from.null = {0} is NULL,type=value-mapping
MappingRuleManager.from.blank = {0} is Blank,type=value-mapping
MappingRuleManager.translateRuleId.notNull = Translate Rule Id is NOT NULL!
MappingRuleManager.mapping.text.null = {0}: mapping/text() must be NOT NULL when Type is "{1}"!
MappingEngine.map.mappingRule.null = Mapping Rule is NULL!
MappingEngine.map.sourceObject.null = Source Object Which Need Mapping is NULL!
MappingEngine.map.sourceObject.wrong = sourceObject should be a Map or a MessageBean! but now it's {0}
MappingEngine.map.fieldMapping.error = Field Mapping Error!Rule is {0}, Exception is {1}
MappingEngine.setGlobalParameter.error = set global param[{0}] to BeanShell Interpreter failed!Exception is {1}
MappingEngine.createTarget.targetType.unkown = Unkown Target Type!
MappingEngine.valueMapping.currentSource.null = Can't find parameter[{0}] in Context
MappingEngine.valueMapping.value.null = value-translate: can't find source value[{0}]'s target value!
MappingEngine.valueMapping.sourceField.list.elementName.null = source field[{0}] is List, need element's name!
MappingEngine.valueMapping.targetField.list.elementName.null = target field[{0}] is List, need element's name!
MappingEngine.valueMapping.sourceList.null = warning! source List[{0}] is null!
MappingEngine.valueMapping.sourceList.notList = source field[{0}] is not a List, but a {1}!It's value is {2}
MappingEngine.valueMapping.targetList.notList = target field[{0}] is not a List, but a {1}!It's value is {2}
MappingEngine.replaceVariable.variable.null = Can't find variable :{0}
MappingEngine.dataTypeConvert.byte[].class.wrong = value[{0}] is byte[]! but targetClass is {1}
MappingEngine.dataTypeConvert.dataTypeValue.unsupport = Unsupport value[{0}] dataType : {1}!
MappingEngine.convertString2Other.canNotToByte[] = String can't convert to byte[]!
MappingEngine.convertString2Other.canNotTo = String can't convert to {0}
MappingEngine.convertByte2Other.canNotToByte[] = Byte can't convert to byte[]!
MappingEngine.convertByte2Other.canNotTo = Byte can't convert to {0}
MappingEngine.convertShort2Other.canNotToByte[] = Short can't convert to byte[]!
MappingEngine.convertShort2Other.shouldNotToByte = Short shouldn't convert to Byte!
MappingEngine.convertShort2Other.canNotTo = Short can't convert to {0}
MappingEngine.convertFloat2Other.canNotToByte[] = Float can't convert to byte[]!
MappingEngine.convertFloat2Other.shouldNotToLong = Float shouldn't convert to Long!
MappingEngine.convertFloat2Other.shouldNotToInt = Float shouldn't convert to Integer!
MappingEngine.convertFloat2Other.shouldNotToShort = Float shouldn't convert to Short!
MappingEngine.convertFloat2Other.shouldNotToByte = Float shouldn't convert to Byte!
MappingEngine.convertFloat2Other.canNotTo = Float can't convert to {0}
MappingEngine.convertDouble2Other.canNotToByte[] = Double can't convert to byte[]!
MappingEngine.convertDouble2Other.shouldNotToLong = Double shouldn't convert to Long!
MappingEngine.convertDouble2Other.shouldNotToFloat = Double shouldn't convert to Float!
MappingEngine.convertDouble2Other.shouldNotToInt = Double shouldn't convert to Integer!
MappingEngine.convertDouble2Other.shouldNotToShort = Double shouldn't convert to Short!
MappingEngine.convertDouble2Other.shouldNotToByte = Double shouldn't convert to Byte!
MappingEngine.convertDouble2Other.canNotTo = Double can't convert to {0}
MappingEngine.convertLong2Other.canNotToByte[] = Long can't convert to byte[]!
MappingEngine.convertLong2Other.shouldNotToInt = Long shouldn't convert to Integer!
MappingEngine.convertLong2Other.shouldNotToShort = Long shouldn't convert to Short!
MappingEngine.convertLong2Other.shouldNotToByte = Long shouldn't convert to Byte!
MappingEngine.convertLong2Other.canNotTo = Long can't convert to {0}
MappingEngine.convertInt2Other.canNotToByte[] = Integer can't convert to byte[]!
MappingEngine.convertInt2Other.shouldNotToShort = Integer shouldn't convert to Short!
MappingEngine.convertInt2Other.shouldNotToByte = Integer shouldn't convert to Byte!
MappingEngine.convertInt2Other.canNotTo = Integer can't convert to {0}
MappingEngine.executeScript.setParam.failed = set param[source/map/bean] to BeanShell Interpreter failed!Exception is {0}
MappingEngine.executeScript.failed = execute Script failed!Exception is {0}
FieldDataLocator.locate.unsupport = Unsupport Locate Method :{0}
FieldDataLocator.locateBySeparator.prefix.null = prefix is null! please set it first!
FieldDataLocator.locateBySeparator.suffix.null = suffix is null! please set it first!
FieldDataLocator.locateBySeparator.prefix.canNotFind = can't find prefix in message! prefix={0}
FieldDataLocator.locateBySeparator.suffix.canNotFind = can't find suffix in message! suffix={0}
FieldDataLocator.dataType.unsupport = Unsupport dataType :{0}
FieldDataLocator.locateByIndex.dataLength.lowerThan0 = dataLength[{0}] <= 0 
FieldDataLocator.locateByIndex.index.greaterThanMsgLen = index[{0}] >= message.length[{1}]
FieldDataLocator.locateByIndex.greaterThanMsgLen = index+dataRealLen[{0}] >= message.length[{1}]
FieldDataLocator.locateMethod.wrong = {0}[{1}] is wrong! it must be "{2}" or "{3}".
FieldDataLocator.dataType.wrong = {0}[{1}] is wrong! it must be "str" or "bin"!
FieldDataLocator.paddingDirection.wrong = {0}[{1}] is wrong! it must be "left" or "right" or "none"!
JobScheduleManager.initialize.noDatabase = You need turn on Database Support first!
SessionConfig.getTimeByText.timeExpressionEnd.unsupport = Unsupported time expression end :{0}, must be sec/min/hou/day
EventTypeConstants.eventType.unkown = Unkown Event Type: {0}
Session.toString.1 = ------------------ Start At {0} ------------------
Session.toString.id = id = {0}
Session.toString.externalSerialNumber = externalSerialNumber = {0}
Session.toString.2 = state = {0}\ntype = {1}\nsessionTimeout = {2}\nreceiveResponseTimeout = {3}\nstartTime = {4}\nendTime = {5}\nlastAliveTime = {6}\nspendTime = {7} ms
Session.toString.processor = processor[id = {0}, type = {1}]
Session.toString.errorMessage = errorMessage[{0}] = {1}
Session.toString.exception = exception = {0}
Session.toString.sourceChannel = sourceChannel = {0}
Session.toString.source = source = {0}
Session.toString.sourceReqMsg = sourceRequestMessage[{0}] = \n{1}
Session.toString.destChannel = destChannel = {0}
Session.toString.destSource = destSource = {0}
Session.toString.destReqMsg = destRequestMessage[{0}] = \n{1}
Session.toString.destResMsg = destResponseMessage[{0}] = \n{1}
Session.toString.sourceResMsg = sourceResponseMessage[{0}] = \n{1}
Session.toString.3 = ------------------  End  At {0} ------------------
Session.getDescriptionByState.unkown = Unkown Session State :{0}
SessionManager.sessionConfig.null = Please Set SessionConfig First!
SessionManager.gateway.closed = Gateway Closed!
SessionManager.session.timeout = Session Timeout! Session: \n{0}
SessionManager.recordSession.failed = record failed session to database failed!
Bootstrap.onceRead.-1 = {0} failed! onceRead=-1 ! remote connection maybe closed
Bootstrap.listJar = list jar[{0}]
SerialNumberGenerator.no.serialNumber = no this Serial Number ID[{0}]!
CommGateway.start.loadModules = ---->> load modules
CommGateway.loadModules.loadModule = ---->>>> load module: {0}
CommGateway.start.loadChannels = ---->> load channels
CommGateway.start.startEventQueue = ---->> start event queue
CommGateway.start.startChannels = ---->> start channels
CommGateway.loadChannel = ---->>>> load channel:{0}
CommGateway.loadChannel.deployPath.notDirectory = channelDeployDir[{0}] isn't a directory!
CommGateway.loadChannel.channelConfigFile.parse.failed = parse channel[{0}] config file {1} failed!Exception is {2}
CommGateway.loadChannel.loadLib.failed = load channel[{0}]'s library {1} failed!Exception is {2}
CommGateway.createChannelInstance.failed = create channel[{0}] instance failed!Exception is {1}
CommGateway.loadChannel.loadConnector.failed = load channel[{0}]'s connector config failed!Config File is {1}, Exception is {2}
CommGateway.loadChannel.loadMessageBean.failed = load channel[{0}]'s message-bean {1} failed!Exception is {2}
CommGateway.loadChannel.getCanonicalPath.failed = getCanonicalPath failed!
CommGateway.loadChannel.getURL.failed = create object of URL failed!Path is {0}
CommGateway.loadChannel.getMessage.failed = getMessage failed . channelId:{0}, xmlFileName:{1}
CommGateway.loadChannel.messageGroupId.notFound = Channel[{0}]'s <message-bean>/@group-id [{1}] can not be found!Please load this group first!
CommGateway.loadChannel.loadMapping.failed = load channel[{0}]'s mapping config {1} failed!Exception is {2}
CommGateway.loadChannel.createMessageTypeRecognizer.failed = create channel[{0}]'s messageTypeRecognizer failed!Exception is {1}
CommGateway.loadChannel.createEventHandler.failed = create channel[{0}]'s EventHandler[{1}] failed!Exception is {2}
CommGateway.loadChannel.createRetCodeRecognizer.failed = create channel[{0}]'s returnCodeRecognizer failed!Exception is {1}
CommGateway.loadChannle.channelId.unkown = Unkown channel id[{0}] in channel symbol table!Channel Id[{1}], channel symbol[{2}]
CommGateway.compileModifiedFiles.compile.error = compile java file failed! error status:{0}. source file:{1}
CommGateway.checkChannelProcessors.processorType.unsupport = Gateway(Without Job) can not support processor type :{0}, Channel Id[{1}], Processor Id[{2}]
CommGateway.checkChannelProcessors.errorMapping.sourceMessageId.notExist = error-mapping's @source-message-id is not exist! MessageGroup Id[{0}], Message Id[{1}]
CommGateway.checkChannelProcessors.action.class.notExist = Can't find Action Class[{0}]!Exception is {1}
CommGateway.checkChannelProcessors.action.unsupport = Gateway(without job) can not support this action which type is "job", Channel Id[{0}], Processor Id[{1}]
CommGateway.checkChannelProcessors.action.processor.notFind = Can not find <action>'s processor[{0}] in Processor Table.
CommGateway.checkChannelProcessors.check.failed = check channel[{0}]' processor[{1}] failed!Exception is {2}
CommGateway.checkChannelProcessors.sourceMsgId.notExist = {0}'s source-message-id is not exist!MessageGroupId[{1}], MessageId[{2}]
CommGateway.checkChannelProcessors.destMsgId.notExist = {0}'s  dest-message-id is not exist! MessageGroupId[{1}], MessageId[{2}]
CommGateway.checkChannelProcessors.beanmapping.notExist = {0}'s Mapping Rule[{1}] is not exist!
CommGateway.loadConfig.deployPath.notDirectory = deployPath[{0}] isn't a directory!
CommGateway.startChannels.startChannel = ---->>>> start channel: {0}
CommGateway.startMonitor.searchProcessor.Connect.DataBase.success= Connect to DataBase success!
CommGateway.startMonitor.searchProcessor=Processor failedï¼{0}
CommGateway.startMonitor.command=Gateway Command is:{0}
LongConnectionSocketChannel.receiveResponseHeartbeat.error = Receive Response Heartbeat After Send Heartbeat Error!Exception is {0}
LongConnectionSocketChannel.receiveResponseHeartbeat.success = Receive Response Heartbeat After Send Heartbeat.Message is :\r\n{0}
LongConnectionSocketChannel.sendHeartbeat.success = Send Heartbeat.Message is :\r\n{0}
LongConnectionSocketChannel.responseTurnBack.onlyForSend = attributes "response-turn-back" is used by send heartbeat config only!
MQChannel.messageKeyRecognizer.unkownId = {0}: Unkown message-key/@recognizer-id! Can't find this id[{1}] in Channel[{2}]'s <recognizer-table>
Session.toString.sourceReqObj = sourceRequestObject[{0}]: \n{1}
Session.toString.unsupportObjectType = The Object's Type is Unsupportted!
Session.toString.destReqObj = destRequestObject[{0}]: \n{1}
Session.toString.destResObj = destResponseObject[{0}]: \n{1}
Session.toString.sourceResObj = sourceResponseObject[{0}]: \n{1}
Session.toString.errorBean = errorMessageBean[{0}]ï¼\n{1}
Socket.setSendBufferSize.error = setSendBufferSize() throws Exception!Current System may be not support the SO_SNFBUF option 
Socket.setReceiveBufferSize.error = setReceiveBufferSize() throws Exception!Current System may be not support the SO_RCVBUF option 
CommGateway.loadVariable.error = Load Variable File Error!Exception is {0}
CommGateway.variable.notFound = Can't find variable string [{0}] in variable file!
HTTPServerChannel.createReactor.error = Create ListeningIOReactor failed!ChannelId[{0}],Exception is {1}
HTTPServerChannel.reactorStart.error = ListeningIOReactor listen or start failed!ChannelId[{0}],Exception is {1}
HTTPServerChannel.receiveRequest.IOException = (HTTPServerChannel)IOException occurred when receive input data!ChannelId[{0}],Exception is {1}
HTTPServerChannel.receiveRequest.HttpException = (HTTPServerChannel)HttpException occurred when receive input data!ChannelId[{0}], Exception is {1}
HTTPServerChannel.sendResponse.IOException = (HTTPServerChannel)IOException occurred when send output data!ChannelId[{0}],Exception is {1}
HTTPServerChannel.sendResponse.HttpException = (HTTPServerChannel)HttpException occurred when send output data!ChannelId[{0}],Exception is {1}
HTTPServerChannel.processRequest.error = (HTTPServerChannel)Process Request failed!ChannelId[{0}],Exception is {1}
HTTPServerChannel.receiveRequest.noParams = (HTTPServerChannel)None Http Parameter received, request is invalid!ChannelId[{0}]
HTTPServerChannel.receiveRequest.success = (HTTPServerChannel)Request Arrived!Content is {0} 
HTTPServerChannel.listen.failed = (HTTPServerChannel)Create Listen Socket Failed!ChannelId[{0}],Exception is {1}
HTTPServerChannel.accept.failed = (HTTPServerChannel)Accept Failed!ChannelId[{0}],Exception is {1}
HTTPServerChannel.bind.failed = (HTTPServerChannel)Bind socket and DefaultHttpServerConnection failed!ChannelId[{0}],Exception is {1}
HTTPServerChannel.sendResponse.failed = (HTTPServerChannel)Send response failed!ChannelId[{0}],Exception is {1}
FixedLengthNioReader.read.more = (FixedLengthNioReader)message length is {0} ,but has read {1}!
DefaultEventHandler.endFlag.false = Current job's[job-id : {0}, processor-id : {1}] end-flag is 'BUSINESS_SUCCESS' but there is no return-code-recognizer!
LongConnectionSocketChannel.reader.read.failed = Found Exception!Will restart server connection!Exception is {0}
LongConnectionSocketChannel.writer.write.failed = Found Exception!Will restart client connection!Exception is {0}
CommGateway.loadConfig.configFileName.notEqual.id = GatewayId [{0}] does not match the GatewayConfigFileName[{1}]!It must obey the rule: GatewayConfigFileName = "gateway_" + gatewayId + ".xml"!
LongConnectionSocketChannel.clientConnection.connected = ClientConnection[{0}] connected!CurrentTime: {1}
LongConnectionSocketChannel.serverConnection.connected = ServerConnection[{0}] connected!CurrentTime: {1}
ChannelConfigParser.processor.defaultProcessor.isExist = Default Processor is already exist!
GatewayConfigFile.module.parameter.null = In main gateway config file ,module[{0}]'s parameter[{1}] is null!
JobManager.interruptJobSchedule.job.notIn.jobCache = Can not find job[id={0}] in job cache!
AbstractMessageFilter.messageException = Accept message error，Accept message exception!