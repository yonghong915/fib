null = {0} 为空!
config.null = 配置文件 {0} 中, {1} 为空!
blank = {0} 的值为空白值!
config.blank = 配置文件 {0} 中, {1} 的值为空白值!
reduplicate = {0} 已存在!产生冲突
inputParameter.null = 输入参数 {0} 为空!
parameter.null = 参数 {0} 为空!
parameter.blank = 参数 {0} 的值为空白值!
type.unsupport = 不支持该类型: {0} !
time.unsupport = 不支持该时间表达式 {0} !
count.zero = {0} 的个数为0!
onceRead.-1 = 接收到-1个字节,远程端口或许已关闭!
onceRead.0 = 接收到0个字节,远程端口或许已关闭!
ConnectionConfig.getTypeByText.connectionType.unsupport = 不支持的连接类型: {0} !
ConnectionConfig.directionType.unsupport = 不支持的连接方向: {0} !
ProcessorRule.getRequestMessageFromByText.requestMessageFrom.unkown = 未知的请求报文来源: {0}
propery.canNotLoadFile = 不能加载文件 {0}
script.BeanShell.setParameters.failed = 添加BeanShell脚本参数失败!异常信息为: {0}
script.executeScript.failed = 执行脚本失败!异常信息为: {0}
RouteRule.determine.type.notDynamic = {0} 的路由规则的类型不是 {1} !
ChannelConfig.getModeByText.mode.unsupport = 不支持的通道模式: {0} 
ChannelConfigParser.checkEventHandler.eventHandler.canNotFind = 找不到实现类为 {0} 的事件处理器!
ChannelConfigParser.checkRouteRule.destChannelSymbol.null = 路由规则(ID为 {0} )的目的通道符号为空!
ChannelConfigParser.checkRouteRule.destChannelSymbol.notExist = 路由规则(ID为 {0} )的目的通道符号 {1} 不存在!
ChannelConfigParser.checkRouteRule.expression.null = 路由规则(ID为 {0} )的表达式为空!
ChannelConfigParser.checkRouteRule.determination.null = 路由规则(ID为 {0} )的动态路由规则为空!
ChannelConfigParser.checkProcessor.routeRule.notExist = 处理器(ID为 {0} )的路由规则(Id为 {1} )不存在!
ChannelConfigParser.checkProcessor.errorMapping.null = 处理器(ID为 {0} )的内部错误映射配置为空!
ChannelConfigParser.checkProcessor.errorMessage.null = 处理器(ID为 {0} ,类型为 {1} )的错误应答报文配置(error-message-transformer)为空!但是返回码识别器中的错误码集合不为空!
ChannelConfigParser.checkProcessor.requestMessage.sourceMessageId.null = 处理器(ID为 {0} ,类型为 {1} )的源请求报文Message的ID(request-message-transformer/@source-message-id)为空!
ChannelConfigParser.checkProcessor.requestMessage.destMessageId.null = 处理器(ID为 {0} ,类型为 {1} )的目的请求报文Message的ID(request-message-transformer/@dest-message-id)为空!
ChannelConfigParser.checkProcessor.requestMessage.beanMapping.null = 处理器(ID为 {0} ,类型为 {1} )的请求报文映射规则ID(request-message-transformer/@bean-mapping)为空!
ChannelConfigParser.checkProcessor.responseMessage.null = 处理器(ID为 {0} ,类型为 {1} )的应答报文配置(response-message-transformer)为空!
ChannelConfigParser.checkProcessor.responseMessage.sourceMessageId.null = 处理器(ID为 {0} ,类型为 {1} )的源应答报文Message的ID(response-message-transformer/@source-message-id)为空!
ChannelConfigParser.checkProcessor.responseMessage.beanMapping.null = 处理器(ID为 {0} ,类型为 {1} )的应答报文映射规则ID(response-message-transformer/@bean-mapping)为空!
ChannelConfigParser.checkProcessor.errorMessage.beanMapping.null = 处理器(ID为 {0} ,类型为 {1} )的错误应答报文映射规则ID(error-message-transformer/@bean-mapping)为空!
ChannelConfigParser.checkProcessor.responseMessage.destMessageId.null = 处理器(ID为 {0} ,类型为 {1} )的目的应答报文Message的ID(response-message-transformer/@dest-message-id)为空!
ChannelConfigParser.checkProcessor.requestHandler.null = 处理器(ID为 {0} ,类型为 {1} )的请求报文特殊处理类(request-message-handler)为空!
ChannelConfigParser.checkProcessor.sourceAsyncAndDestAsync.same = 当处理器的类型为 {1} 时,处理器(ID为 {0} )的源通道是否异步标志和目的通道是否异步标志必须相同!
ChannelConfigParser.checkProcessor.job.processor.notExist = 任务执行所指定的处理器(ID为 {0} )不存在!当前通道ID为 {1} ,当前处理器ID为 {2}
ChannelConfigParser.checkProcessor.returnCodeRecognizer.recognizerId.notExist = 返回码识别器不存在!识别器表中不存在该识别器ID: {0}
ChannelConfigParser.checkProcessor.returnCodeRecognizer.errorCode.in.successCode = 返回码识别器的错误返回码 {0} 已经在成功返回码集合中!
ChannelConfigParser.checkProcessor.messageTypeRecognizer.recognizerId.notExist = 报文类型识别器不存在!识别器表中不存在该识别器ID: {0}
ChannelConfigParser.checkProcessor.messageType.processor.notExist = 报文类型为 {0} 的报文所对应的处理器(ID为 {1} )不存在!
ChannelConfigParser.parseCase.processor.isNotInTable = 处理器表中不存在ID为 {0} 的处理器!
ChannelConfigParser.parseEvent.event.count.zero = 当<event>/@type为空或值为空白值时,<event-set>/<event>的个数应当大于0!
ChannelConfigParser.parseActionConfig.action.class.null = 当<action>/@type为 "{1}" 时, {0} 必须不为空!
ChannelConfigParser.checkProcessor.transmit.messageHandler.notNull = 当处理器类型为 {2} 时，处理器(ID为 {0} ,类型为 {1} )的报文特殊处理类(request-message-handler/response-message-handler/error-message-handler)不可配置!
ChannelConfigParser.checkProcessorId.length = 处理器ID[值为{0}]的值的长度必须小于等于80!
ConnectorConfig.channelType.unsupport = 未知的通道类型: {0}
HTTPClientChannel.sendRequestMessage.noHandler = 正在执行中的处理器数目为 {0} ,没有多余的处理器发送请求报文!
HTTPClientChannel.sendRequestMessage.createParameter.failed = 创建HTTP请求参数失败!
HTTPClientChannel.sendResponseMessage.error = HTTP客户端通道(ID为 {0} )不能发送应答报文!
HTTPClientHandler.run.createMethod.error = 创建HTTP传输的POST方法并且添加参数失败!参数为: {0}
HTTPClientHandler.run.connect.error = 连接失败!
HTTPClientHandler.run.communicate.error = 通讯失败!
HTTPClientHandler.endElement.url.format.invalidate = 配置文件 {0} 中的url配置的值 {1} 不是一个合法的URL!异常信息为: {2} 
calculateMessageLength.lengthField.dataType.unsupport = 不支持的报文长度域数据类型: {0} 
LengthCheckReader.parseParameters.dataType.wrong = 参数 {0} 是错误的!不支持的数据类型 {1} !数据类型必须为num或int或net-int或short或net-short或byte
LengthCheckReader.parseParameters.lengthEqual4 = {0} 是int, {1} 必须为4!
LengthCheckReader.parseParameters.lengthEqual1 = {0} 是byte, {1} 必须为1!
LengthCheckReader.parseParameters.lengthEqual2 = {0} 是short, {1} 必须为2!
message.beforeFilter = 过滤器(实现类为 {0} )过滤前的报文为:\r\n{1}
message.afterFilter = 过滤器(实现类为 {0} )过滤后的报文为:\r\n{1}
AbstractReader.read.partMessage = 读取部分报文,一次读取 {0} 个字节,已经读取 {1} 个字节,已经读取的报文为:\r\n{2}
LongConnectionSocketChannel.connect.invalidate = 连接不可用
LongConnectionSocketChannel.internalStart.login.failed.1 = 登陆失败!通道ID为: {0}
LongConnectionSocketChannel.internalStart.login.failed.2 = 登陆失败!通道ID为：{0}, 异常信息为: {0}
LongConnectionSocketChannel.internalStart.login.success = 登陆成功或者不需登陆
ClientConnection.toString = 发送端连接(ID为 {0} ,连接为 {1} ,方向为 {2} ,地址为 {3}:{4} )
ServerConnection.toString = 接收端连接(ID为 {0} ,连接为 {1} ,方向为 {2} ,监听端口为 {3} )
ServerConnection.toString.socket = 　远程端口为 {0}
ReceiveHandler.responseMessage.unmatched = \r\n****************** 应答报文,没有其对应的请求报文 ******************\r\n流水号为 {0}\r\n报文为\r\n{1}\r\n**************************************************************
WaitQueueMonitor.timeout = 接收应答报文超时!
LongConnectionSocketChannelConfigParser.configCheck.connection.zero = 配置文件 {0} 中<connection>的个数为0!
LongConnectionSocketChannelConfigParser.configCheck.connection.tooMany = 配置文件 {0} 中<connection>个数太多,为 {1}
LongConnectionSocketChannelConfigParser.configCheck.connection.direction.double = 配置文件 {0} 中,只有一个<connection>,因此其通讯方向必须为"double"!
LongConnectionSocketChannelConfigParser.configCheck.connection.direction.opposite = 配置文件 {0} 中,有两个<connection>,因此每个<connection>的通讯方向必须不同!
LongConnectionSocketChannelConfigParser.configCheck.connection.direction.notDouble = 配置文件 {0} 中,有两个<connection>,因此它们的通讯方向不能为"double"!
LongConnectionSocketChannelConfigParser.configCheck.heartbeat.connection.notDouble = 配置文件 {0} 中,心跳包的通讯方向配置不能为"double"!
LongConnectionSocketChannelConfigParser.configCheck.heartbeat.connection.direction.send = 配置文件 {0} 中,心跳包的通讯方向为"send",因此它的时间间隔属性(@interval)必须配置!
LongConnectionSocketChannelConfigParser.configCheck.heartbeat.connection.responseConnection.notExist = 配置文件 {0} 中,心跳包的应答连接(ID为 {1} )不存在!
LongConnectionSocketChannelConfigParser.configCheck.heartbeat.messageSymbol.notExist = 配置文件 {0} 中,报文符号表中不存在该报文符号 {1} 的配置!
LongConnectionSocketChannelConfigParser.configCheck.requestSerialNumberRecognizer.null = 配置文件 {0} 中,请求报文流水号识别器为空,请检查是否存在<request-serial-number-recognizer>配置!
LongConnectionSocketChannelConfigParser.configCheck.requestSerialNumberRecognizer.unkownId = 配置文件 {0} 中,未知的请求报文流水号识别器,在通道 {2} 配置的识别器表中找不到该识别器(ID为 {1} )!
LongConnectionSocketChannelConfigParser.configCheck.responseSerialNumberRecognizer.null = 配置文件 {0} 中,应答报文流水号识别器为空!请检查是否存在<response-serial-number-recognizer>配置!
LongConnectionSocketChannelConfigParser.configCheck.responseSerialNumberRecognizer.unkownId = 配置文件 {0} 中,未知的应答报文流水号识别器,在通道 {2} 配置的的识别器表中找不到该识别器(ID为 {1} )!
LongConnectionSocketChannelConfigParser.configCheck.codeRecognizer.null = 配置文件 {0} 中,报文码(用于判断是请求报文还是应答报文)识别器为空,请检查是否存在<code-recognizer>配置!
LongConnectionSocketChannelConfigParser.configCheck.codeRecognizer.requestCodeSetAndResponseCodeSet.empty = 配置文件 {0} 中,报文码(用于判断是请求报文还是应答报文)识别器的请求报文码集合和应答报文码集合全部为空!
LongConnectionSocketChannelConfigParser.configCheck.codeRecognier.unkownId = 配置文件 {0} 中,未知的报文码(用于判断是请求报文还是应答报文)识别器,在通道 {2} 配置的识别器表中找不到该识别器(ID为 {1} )!
LongConnectionSocketChannelConfigParser.configCheck.loginConfig.null = 配置文件 {0} 中,登录器配置为空!请检查是否存在<login>配置!
LongConnectionSocketChannelConfigParser.configCheck.class.notFound = 找不到类 {0} !异常信息为: {1}
LongConnectionSocketChannelConfigParser.configCheck.receiveConnection.needPort = 配置文件 {0} 中,接收端连接(ID为 {1} )必须有'port'属性!
LongConnectionSocketChannelConfigParser.configCheck.sendConnection.needServerAddress = 配置文件 {0} 中,发送端连接(ID为 {1} )必须有'server-address'属性!
LongConnectionSocketChannelConfigParser.configCheck.sendConnection.serverAddress.wrong = 配置文件 {0} 中,发送端连接(ID为 {1} )的'server-address'属性的值为错误值!异常信息为: {3}
LongConnectionSocketChannelConfigParser.configCheck.sendConnection.needPort = 配置文件 {0} 中,发送端连接(ID为 {1} )必须有'port'属性!
LongConnectionSocketChannelConfigParser.hexStrCheck.notHexString.1 = 字符串 {0} 的长度是一个奇数值,不可能是一个16进制字符串!
LongConnectionSocketChannelConfigParser.hexStrCheck.notHexString.2 = 字符串 {0} 包含一个不是16进制字符的非法字符 {1}!
ISO8583MessageRecognizer.recognize.allNull = 域组合列表(field-list)和表达式同时为空!
ISO8583MessageRecognizer.recognize.message.notExist = 报文配置元数据[组id为{0}, id为{1}] 不存在!"
SeparatorMessageRecognizer.recognize.separator.notFound = 找不到第 {1} 个分隔符 {0}!
SeparatorMessageRecognizer.recognize.fieldIndex.lessThan1 = 域索引(field-index)的最小值为1,当前配置的索引值为 {0} ,不能小于1!
index.lessThan0 = 参数 {0} 必须大于0
XPathRecognizer.recognize.message.tooShort.1 = xml报文开始索引(xmlStartAt)的值 {0} 大于等于报文的长度 {1}!
XPathRecognizer.recognize.message.tooShort.2 = xml报文的长度 {0} 等于报文的长度减去xml报文开始索引(xmlStartAt)的值并减去xml报文结束与报文结束的偏移量的值(xmlEndOffset)!
XPathRecognizer.charset.illegal = 非法字符集 {0} !异常信息为: {1}
MQChannelConfigParser.configCheck.count.moreThan2 = {0} 的个数过于大!最大为2!
MQChannelConfigParser.configCheck.count.equal1 = {0}的个数为1,但是通道类型不是"double"!
MQChannelConfigParser.configCheck.type.notDouble = {0}的类型是"double"但是没有配置<code-recognizer>!
MQChannelConfig.queueType.unsupport = 不支持的队列类型: {0}!必须为'send'或'receive'或'double'!
MQChannelConfig.type.unsupport = 不支持的类型: {0}!必须为'server'或者'client'!
MQClientChannel.sendResponseMessage.error = MQ客户端通道(ID为 {0} )不能发送应答报文!
MQChannel.shutDown.sendQueue.error = 关闭发送队列失败!
MQChannel.shutDown.sendManager.error = 关闭发送队列管理器失败!
MQChannel.shutDown.receiveQueue.error = 关闭接收队列失败!
MQChannel.shutDown.receiveManager.error = 关闭接收队列管理器失败!
MQChannel.shutDown.channel.error = 关闭MQ通道失败!
MQChannel.start.config.null = 配置信息为空,请先加载配置文件!
MQClientChannel.start.config.type.wrong = 配置信息的类型不是"client"!
MQClientChannel.start.sendQueueConfig.notFound = 没有找到发送队列的配置信息!请检查配置文件!
MQChannel.start.QueueConfig.notFount = 没有找到MQ队列的任何配置信息!请检查配置文件!
MQChannel.start.sendQueueManager.connect.error = 连接发送队列管理器失败!
MQChannel.start.sendQueue.connect.error = 连接发送队列失败!
MQChannel.start.receiveQueueManager.connect.error = 连接接收队列管理器失败!
MQChannel.start.receiveQueue.connect.error = 连接接收队列失败!
MQChannel.getQueueConfigByType.quueType.unkown = 未知的队列类型,必须为'send'或者'receive'!
MQChannel.MQMessage.write.error = MQ Message写入失败!
MQChannel.putMessage.error = 发送Message到队列失败!
MQClientChannel.MQsendThread.sendRequest.success = 发送请求报文成功,报文ID为:\r\n{0}\r\n请求报文为:\r\n{1}
MQChannel.getQueueDepth.error = 获取接收队列当前队列深度失败!
MQChannel.getMessage.error = 从接收队列中取Message失败!
MQChannel.readMessage.error = 读取Message失败!
MQClientChannel.MQreceiveThread.receiveMessage.requestMessage.notFound = 接收到的报文没有与之对应的请求报文,接收到的报文ID为:\r\n{0}
MQClientChannel.MQreceiveThread.waitResponse.timeout = 等待应答超时,请求报文为:\r\n{0}
MQClientChannel.MQreceiveThread.receiveResponse.success = 接收应答报文成功,报文ID为:\r\n{0}\r\n应答报文为:\r\n{1}
MQServerChannel.sendRequestMessage.error = MQ服务端通道(ID为 {0} )不能发送请求报文!
MQServerChannel.start.config.type.wrong = 配置信息的类型不是"server"!
MQServerChannel.start.receiveQueueConfig.notFound = 没有找到接收队列的配置信息!请检查配置文件!
MQServerChannel.MQreceiveThread.receiveRequest = 接收请求报文成功,请求报文为:\r\n{0}
MQServerChannel.MQsendThread.sendResponse = 发送应答报文成功,应答报文为:\r\n{0}
LengthCheckReader.messageLengthField.dataType.unsupport = 不支持的报文长度域数据类型 {0}
Reader.dataType.unsupport = 参数 {0} 错误!不支持的数据类型 {1}!数据类型必须为num/或int或net-int或short或net-short或byte
SocketClientChannelConfigParser.configCheck.type.mustClient = 短连接客户端通道的'type'属性的值必须是'client'!
SocketClientChannelConfigParser.configCheck.serverAddress.mustHave = 短连接服务端通道必须有'server-address'属性!
SocketClientChannelConfigParser.configCheck.serverAddress.wrong = 短连接服务端通道的'server-address'属性的值 {0} 是一个错误值!异常信息为: {1}
SocketChannelConfigParser.configCheck.port.mustHave = 短连接服务端通道必须有'port'属性!
SocketChannelConfigParser.configCheck.class.notFound = 没有找到类 {0} !异常信息为: {1}
SocketServerChannelConfigParser.configCheck.type.mustServer = 短连接服务端通道的'type'属性的值必须为'server'!
SocketServerChannelConfigParser.configCheck.backlog.mustHave = 短连接服务端属性必须有'backlog'属性!
LengthCheckNioReader.checkMessageComplete.info = 报文长度为 {0} ,偏移量为 {1} ,已经接收到 {2} 个字节
AbstractNioReader.read.partialMessage.read = 读取部分报文, 一次读取 {0} 个字节,已经读取 {1} 个字节,该次读取的报文为:\r\n{2}
AbstractNioWriter.write.hasWrite = 一次写入 {0} 个字节,已经写入 {1} 个字节
SocketClientChannel.sendResponseMessage.canNotSend = 短连接客户端通道(ID为 {0} )不能发送应答报文!
SocketChannel.selector.select.error = 异步I/O的selector选择key异常!
SocketChannel.selector.crashed = 异步I/O的selector已经被撤销!
SocketChannel.key.invalid = key {0} 为非法key!
SocketChannel.handleKey.error = 处理key异常!
SocketChannel.channel.crashed = 异步I/O的传输通道已经被撤销!
SocketChannel.selector.open.error = 打开异步I/O的selector失败!
SocketChannel.connect.failed = 连接失败!
SocketChannel.write.failed = 写入待发送数据失败!
SocketClientChannel.handleKey.sendRequest.success = 发送请求报文:\r\n{0}
SocketChannel.read.failed = 读取接收到的数据失败!来自于 {0}
SocketClientChannel.handleKey.receiveResponse.success = 接收应答报文:\r\n{0}
SocketServerChannel.handleKey.serverSocket.open.failed = 打开监听端口失败!
SocketServerChannel.handleKey.invalid = 监听端口通道非法!
SocketServerChannel.handleKey.accept.error = 接收连接出错!
SocketServerChannel.handleKey.register.error = 注册传输通道出错!
SocketServerChannel.handleKey.receiveRequest.success = 接收请求报文成功:\n{0}
SocketServerChannel.handleKey.receiveRequest.success.1 = 从地址 {0} 接收请求报文成功:\n{1}
SocketServerChannel.handleKey.sendResponse.success = 发送应答报文成功:\n{0}
Channel.toString = {0} 类型为 {1} ,实现类为 {2} 
libPath.notExist = 类路径 {0} 不存在!
libPath.notDirectory = 类路径 {0} 不是一个目录!
libPath.canNotRead = 类路径 {0} 不可读!
AppendableURLClassloader.getAllJarUrl.listJar.error = 添加jar包 {0} 出错!异常信息为: {1}
ChannelMainConfig.toString = 通道信息为:ID[{0}],名称[{1}],是否启动时加载[{2}],部署文件目录[{3}]
DefaultEventHandler.sendResponse.failed = 发送应答报文失败!
DefaultEventHandler.parseSourceRequest.error = 解包源请求报文失败!源通道ID为 {0},处理器ID为 {1},异常为 {2}
DefaultEventHandler.requestMappingError = 从源请求报文数据对象映射到目的请求报文数据对象出错!源通道ID为 {0} , 处理器ID为 {1} ,映射规则ID为 {2}, 异常为 {3}
DefaultEventHandler.packSourceResponse.error = 组包源应答报文失败!源通道ID为 {0} ,处理器ID为 {1}, 异常为 {2}
DefaultEventHandler.returnCodeRecognize.error = 识别返回码出错!源通道ID为 {0} ,处理器ID为 {1}, 异常为 {2}
DefaultEventHandler.returnCodeRecognize.unkownReturnCode = 未知的返回码 {0} !
DefaultEventHandler.returnCodeRecognize.returnCodeRecognizeNotExist = 错误消息转换器不存在!
DefaultEventHandler.parseDestResponse.error = 解包目的应答报文出错!源通道ID为 {0} ,处理器ID为 {1}, 异常为{2}
DefaultEventHandler.responseMappingError = 从源应答报文数据对象映射到目的应答报文数据对象出错!源通道ID为 {0} ,处理器ID为 {1} ,映射规则ID为 {2}, 异常为 {3}
DefaultEventHandler.packSourceResponse.error = 组包源应答报文出错!源通道ID为 {0} ,处理器ID为 {1}, 异常为 {2}
DefaultEventHandler.createSession.error = 创建会话错误!源通道ID为 {0}, 异常为 {1}
DefaultEventHandler.messageTypeRecognize.error = 识别报文类型出错!源通道ID为 {0}, 异常为 {1}
DefaultEventHandler.messageTypeRecognize.unkownMessageType = 未知的报文类型 {0} !源通道ID为 {1}
DefaultEventHandler.dynamicRouteRule.determination.null = 路由的动态路由规则为空!
DefaultEventHandler.dynamicRouteRule.determine.error = 确定动态路由方向出错!源通道ID为 {0} ,处理器ID为 {1}, 异常为 {2}
DefaultEventHandler.sourceRequestHandle.error = 源请求报文特殊处理出错!源通道ID为 {0} ,处理器ID为 {1}, 异常为 {2}
DefaultEventHandler.packDestRequest.error = 组包目的请求报文出错!源通道ID为 {0} ,处理器ID为 {1}, 异常为 {2}
DefaultEventHandler.dataType.unkown = 未知数据类型!值必须为"MESSAGE-BEAN"或"MAP"
DefaultEventHandler.request.handler.error = 请求报文特殊处理异常!源通道ID为 {0} ,处理器ID为 {1}, 异常为 {2}
DefaultEventHandler.response.handler.error = 应答报文特殊处理异常!源通道ID为 {0} ,处理器ID为 {1}, 异常为 {2}
Event.getEventTypeText.accept.error = 接收连接出错!
Event.getEventTypeText.receiveRequest.error = 接收请求报文出错
Event.getEventTypeText.receiveResponse.error = 接收应答报文出错
Event.getEventTypeText.sendRequest.error = 请求报文发送出错
Event.getEventTypeText.sendResponse.error = 应答报文发送出错
Event.getEventTypeText.connect.error = 连接出错
Event.getEventTypeText.requestArrived = 请求报文到达
Event.getEventTypeText.responseArrived = 应答报文到达
Event.getEventTypeText.responseSent = 应答报文已发送
Event.getEventTypeText.requestSent = 请求报文已发送
Event.getEventTypeText.unkownException = 未知异常
Event.getEventTypeText.fatalError = 致命错误
Event.toString.eventAt = ------------------ 事件开始于  {0} ------------------
Event.toString.eventType = 事件类型为: {0}
Event.toString.sourceChannel = 来源通道为: {0}
Event.toString.source = 来源为: {0}
Event.toString.requestMessage = 请求报文为:\r\n{0}
Event.toString.responseMessage = 应答报文为:\r\n{0}
Event.toString.exception = 异常为: {0}
EventHandlerThread.sendRequest.error = 请求报文发送出错!源通道ID为 {0}
EventHandlerThread.connectDest.error = 连接目的系统出错!目的通道ID为 {0}
EventHandlerThread.receiveResponse.error = 接收应答报文出错!目的通道ID为 {0}
EventHandlerThread.exception = 未知异常
TimeExpressionParser.buildExpression.parseMonth.error = 不支持用当月其余天数指定'L'和'LW'的语法
TimeExpressionParser.buildExpression.parseWeek.error = 不支持用当周其余天数指定'L'的语法
TimeExpressionParser.buildExpression.expression.unexpectedEnd = 不可识别的表达式结尾
TimeExpressionParser.buildExpression.parseMonthOrWeek.error = 不支持既表明一周里的一天又表明一月里的一天的参数
TimeExpressionParser.buildExpression.expression.illegalFormat = 非法的时间表达式格式: {0}
TimeExpressionParser.storeExpressionVals.monthValue.invalid = 表明月份的值 {0} 无效
TimeExpressionParser.storeExpressionVals.dayOfWeek.invalid = 表明一周中的一天的值 {0} 无效
TimeExpressionParser.numbericValue.mustFollow = 在1和5范围的一个数值必须跟随‘#’选择
TimeExpressionParser.storeExpressionVals.illegalCharacter.1 = 在当前位置 {0} 上的字符不合法
TimeExpressionParser.storeExpressionVals.illegalCharacter.2 = '?'后面跟随的字符 {0} 不合法
TimeExpressionParser.storeExpressionVals.specialSymbol.1 = '?'只能用于表明一月里的一天或一周里的一天
TimeExpressionParser.storeExpressionVals.specialSymbol.2 = '/'后面必须跟随一个整数
TimeExpressionParser.storeExpressionVals.unexpectedEnd = 不可识别的字符串结尾
TimeExpressionParser.storeExpressionVals.increment.greaterThan60 = 增量值 {0} 大于60
TimeExpressionParser.storeExpressionVals.increment.greaterThan24 = 增量值 {0} 大于24
TimeExpressionParser.storeExpressionVals.increment.greaterThan31 = 增量值 {0} 大于31
TimeExpressionParser.storeExpressionVals.increment.greaterThan7 = 增量值 {0} 大于7
TimeExpressionParser.storeExpressionVals.increment.greaterThan12 = 增量值 {0} 大于12
TimeExpressionParser.storeExpressionVals.character.unexpected = 不可识别的字符 {0}
TimeExpressionParser.checkNext.LOption.notValid = 在当前索引 {0} 的位置'L'选项无效
TimeExpressionParser.checkNext.WOption.notValid = 在当前索引 {0} 的位置'W'选项无效
TimeExpressionParser.checkNext.Option.notValid = 在当前索引 {0} 的位置'#'选项无效
TimeExpressionParser.checkNext.character.unexpected ='/'后跟随的字符 {0} 不可识别
TimeExpressionParser.addToSet.minuteAndSecondValue.between0And59 = 表示分和秒的值必须在0到59之间
TimeExpressionParser.addToSet.hourValue.between0And23 = 表示小时的值必须在0到23之间
TimeExpressionParser.addToSet.dayOfMonth.between1And31 = 表示一月里的一天的值必须在1到31之间
TimeExpressionParser.addToSet.monthValue.between1And12 = 表示月份的值必须在1到12之间
TimeExpressionParser.addToSet.dayOfWeek.between1And7 = 表示一周里的一天的值必须在1到7之间
TimeExpressionParser.addToSet.startYear.mustLessThan.stopYear = 开始年份必须小于结束年份
TimeExpressionParser.addToSet.unexpectedType = 不可识别的类型
TimeExpressionParser.getTimeAfter.operation.unsupport = 不支持既表明一周里的一天又表明一月里的一天的参数
TimeExpressionParser.getLastDayOfMonth.month.illegal = 表示月份的值 {0} 不合法
TimeExpressionParser.clone.notCloneable = 不可克隆
CommunicateJob.init.noCommLog = 通讯任务(ID为 {0} )执行失败!没有在数据库表comm_log中找到与该日志ID {1} 相关的记录!
CommunicateJob.businessLogic.sourceChannel.notFound = 通讯任务(ID为 {0} )执行失败!没有在配置中找到源通道(通道ID为 {1} )
CommunicateJob.businessLogic.processor.null = 通讯任务(ID为 {0} )执行失败!没有在ID为 {1} 的通道配置中找到相关处理器(处理器ID为 {2} )
CommunicateJob.businessLogic.processorRule.null = 通讯任务(ID为 {0} )执行失败!处理器(ID为 {1} ,源通道ID为 {2} )不包含<processor-rule>配置
CommunicateJob.businessLogic.message.null = 通讯任务(ID为 {0} )执行失败!请求报文为空!
CommunicateJob.businessLogic.determination.null = 路由的动态路由规则为空!
LocalJobDelegator.businessLogic.className.null = 本地任务处理类为空!
AbstractJob.caculateNextFireTime.currentJob.null = 当前任务为空!计算下次执行时间出错!
AbstractJob.caculateNextFireTime.scheduleType.unkown = 未知的调度类型!
AbstractJob.terminate.currentJob.null = 当前任务为空!结束任务出错!
AbstractJob.terminate.error = 结束任务(ID为 {0} )出错!
AbstractJob.cancel.error = 取消任务(ID为 {0} )出错!
AbstractJob.cancel.currentJob.null = 当前任务为空!取消任务出错!
AbstractJob.run.currentJob.null = 当前任务为空!执行任务出错!
AbstractJob.run.getJobLogId.error = 获得任务日志ID(用于存储任务日志到数据库)出错!
AbstractJob.run.businessLogic.execute.error = 执行任务的业务逻辑出错!
AbstractJob.run.runJob.error = 执行任务出错!异常信息为: {0} 
AbstractJob.getTimeByTimeRule.expression.null = 时间表达式为空!
AbstractJob.getTimeByTimeRule.expression.blank = 时间表达式的值为空白值!
AbstractJob.getTimeByTimeRule.parseExpression.error = 解析时间表达式出错!异常信息为: {0}
JobManager.loadAndScheduleJob.getJobAlive.error = 查找处于活动状态的任务出错!
JobManager.loadAndScheduleJob.scheduleJob.error = 注册调度任务(任务ID为 {0} )出错!
JobManager.addJobSchedule.job.null = 任务为空!不能调度!
Task.run.job.null = 任务为空!
timer.null = 调度器为空!
TaskExecutor.run.task.null = 调度任务为空!
TaskExecutor.run.error = 调度任务执行出错!异常信息为: {0}
MapClient.receive.readLength.failed = 读取报文长度失败!已读取 {0} 个字节
MapClient.receive.readMsg.failed = 读取报文失败!远程端口或许已关闭!已读取 {0} 个字节
FieldMappingRule.toString.1 = 域映射规则[类型为 {0},从 {1} 映射到 {2} 
FieldMappingRule.toString.2 = , 目的类型为 {0}
FieldMappingRule.toString.3 = , 强制类型转换
MappingRule.getClassTypeByText.unkownSource = 未知的源/目的对象类型: {0} !
MappingRuleManager.loadMappingConfig.path.notDirectory = 路径 {0} 必须是一个目录!
MappingRuleManager.loadMappingConfig.path.canNotRead = 路径 {0} 不可读!
MappingRuleManager.loadMappingConfig.id.reduplicate = 配置文件 {0} 中,映射规则ID {1} 已存在,产生冲突
MappingRuleManager.getMappingRule.group.null = 组 {0} 为空!请先加载它!
MappingRuleManager.translateRuleId.blank = {0} 为空白值,类型为值转换映射
MappingRuleManager.notTranslateRule = {0} 或许不是一个值转换映射规则!
MappingRuleManager.id.notEqual = {0} 的ID {1} 不等于 {2}
MappingRuleManager.from.null = {0} 为空,类型为值映射
MappingRuleManager.from.blank = {0} 为空白值,类型为值映射
MappingRuleManager.translateRuleId.notNull = 值转换映射规则ID不为空!
MappingRuleManager.mapping.text.null = 配置文件 {0} 中,当类型是"{1}"时,mapping/text()必须不为空!
MappingEngine.map.mappingRule.null = 映射规则为空!
MappingEngine.map.sourceObject.null = 需要被映射的源数据对象为空!
MappingEngine.map.sourceObject.wrong = 源数据对象应当是一个Map或是一个MessageBean,但是当前为 {0}
MappingEngine.map.fieldMapping.error = 域映射规则错误!规则信息为: {0} ,异常信息为: {1}
MappingEngine.setGlobalParameter.error = 设置BeanShell脚本全局变量 {0} 失败!异常信息为 {1}
MappingEngine.createTarget.targetType.unkown = 未知的目的对象类型!
MappingEngine.valueMapping.currentSource.null = 在变量上下文中找不到参数 {0}
MappingEngine.valueMapping.value.null = 值转换映射规则,找不到与源数据 {0} 对应的目的数据!
MappingEngine.valueMapping.sourceField.list.elementName.null = 源对象域 {0} 是一个列表, 需要列表下元素的名称!
MappingEngine.valueMapping.targetField.list.elementName.null = 目的对象域 {0} 是一个列表, 需要列表下元素的名称!
MappingEngine.valueMapping.sourceList.null = 警告!源列表为空!
MappingEngine.valueMapping.sourceList.notList = 源对象域 {0} 是一个 {1} 而不是一个列表,它的值为 {2}
MappingEngine.valueMapping.targetList.notList = 目的对象域 {0} 是一个 {1} 而不是一个列表,它的值为 {2}
MappingEngine.replaceVariable.variable.null = 没有找到变量 {0}
MappingEngine.dataTypeConvert.byte[].class.wrong = 值 {0} 的数据类型为字节数组(byte[])!但是目的数据类型为 {1}
MappingEngine.dataTypeConvert.dataTypeValue.unsupport = 不支持的值 {0} 的数据类型 {1} !
MappingEngine.convertString2Other.canNotToByte[] = 字符串(String)不能转换成字节数组(byte[])!
MappingEngine.convertString2Other.canNotTo = 字符串{String)不能转换成 {0} !
MappingEngine.convertByte2Other.canNotToByte[] = 字节(Byte)不能转换成字节数组(byte[])!
MappingEngine.convertByte2Other.canNotTo = 字节(Byte)不能转换成 {0} !
MappingEngine.convertShort2Other.canNotToByte[] = 短整型(Short)不能转换成字节数组(byte[])!
MappingEngine.convertShort2Other.shouldNotToByte = 短整型不能直接转换成字节(Byte)!!
MappingEngine.convertShort2Other.canNotTo = 短整型不能转换成 {0} !
MappingEngine.convertFloat2Other.canNotToByte[] = 浮点型(Float)不能转换成字节数组(byte[])!
MappingEngine.convertFloat2Other.shouldNotToLong = 浮点型(Float)不能直接转换成长整型(Long)!
MappingEngine.convertFloat2Other.shouldNotToInt = 浮点型(Float)不能直接转换成整型(Integer)!
MappingEngine.convertFloat2Other.shouldNotToShort = 浮点型(Float)不能直接转换成短整型(Short)!
MappingEngine.convertFloat2Other.shouldNotToByte = 浮点型(Float)不能直接转换成字节(Byte)!
MappingEngine.convertFloat2Other.canNotTo = 浮点型(Float)不能转换成 {0} !
MappingEngine.convertDouble2Other.canNotToByte[] = 双精度浮点型(Double)不能转换成字节数组(byte[])!
MappingEngine.convertDouble2Other.shouldNotToLong = 双精度浮点型(Double)不能直接转换成长整型(Long)!
MappingEngine.convertDouble2Other.shouldNotToFloat = 双精度浮点型(Double)不能直接转换成浮点型(Float)!
MappingEngine.convertDouble2Other.shouldNotToInt = 双精度浮点型(Double)不能直接转换成整型(Integer)!
MappingEngine.convertDouble2Other.shouldNotToShort = 双精度浮点型(Double)不能直接转换成短整型(Short)!
MappingEngine.convertDouble2Other.shouldNotToByte = 双精度浮点型(Double)不能直接转换成字节(Byte)!
MappingEngine.convertDouble2Other.canNotTo = 双精度浮点型(Double)不能转换成 {0} !
MappingEngine.convertLong2Other.canNotToByte[] = 长整型(Long)不能转换成字节数组(byte[])!
MappingEngine.convertLong2Other.shouldNotToInt = 长整型(Long)不能直接转换成整型(Integer)!
MappingEngine.convertLong2Other.shouldNotToShort = 长整型(Long)不能直接转换成短整型(Short)!
MappingEngine.convertLong2Other.shouldNotToByte = 长整型(Long)不能直接转换成字节(Byte)!
MappingEngine.convertLong2Other.canNotTo = 长整型(Long)不能转换成 {0} !
MappingEngine.convertInt2Other.canNotToByte[] = 整型(Integer)不能转换成字节数组(byte[])!
MappingEngine.convertInt2Other.shouldNotToShort = 整型(Integer)不能直接转换成短整型(Short)!
MappingEngine.convertInt2Other.shouldNotToByte = 整型(Integer)不能直接转换成字节(Byte)!需指定强制类型转换
MappingEngine.convertInt2Other.canNotTo = 整型不能转换成 {0} !
MappingEngine.executeScript.setParam.failed = 设置BeanShell脚本参数 source,map,bean失败!异常信息为 {0}
MappingEngine.executeScript.failed = 执行脚本失败!异常信息为 {0}
FieldDataLocator.locate.unsupport = 不支持的定位方法: {0}
FieldDataLocator.locateBySeparator.prefix.null = 前缀符为空!请先设定前缀符!
FieldDataLocator.locateBySeparator.suffix.null = 后缀符为空!请先设定后缀符!
FieldDataLocator.locateBySeparator.prefix.canNotFind = 报文中没有找到前缀符 {0} !
FieldDataLocator.locateBySeparator.suffix.canNotFind = 报文中没有找到后缀符 {0} !
FieldDataLocator.dataType.unsupport = 不支持的数据类型 {0}
FieldDataLocator.locateByIndex.dataLength.lowerThan0 = 数据长度为 {0} ,小于0!
FieldDataLocator.locateByIndex.index.greaterThanMsgLen = 起始索引 {0} 大于等于报文的长度 {1}
FieldDataLocator.locateByIndex.greaterThanMsgLen = 起始索引和所取数据的长度之和 {0} 大于等于报文的长度 {1}
FieldDataLocator.locateMethod.wrong = {0} 的值 {1} 错误!必须为"{2}"或"{3}".
FieldDataLocator.dataType.wrong = {0} 的值 {1} 错误!必须为"str"或"bin".
FieldDataLocator.paddingDirection.wrong = {0} 的值 [{1}] 错误! 必须为"left"或"right"或"none"!
JobScheduleManager.initialize.noDatabase = 任务管理器组件初始化需要先加载数据库组件!
SessionConfig.getTimeByText.timeExpressionEnd.unsupport = 不支持的时间表达式结尾: {0} ,必须为sec或min或hou或day
EventTypeConstants.eventType.unkown = 未知事件类型 {0}
Session.toString.1 = ------------------ 开始于 {0} ------------------
Session.toString.id = ID为: {0}
Session.toString.externalSerialNumber = 外部流水号为: {0}
Session.toString.2 = 状态为: {0}\r\n类型为: {1}\r\n会话超时间隔为: {2}\r\n接收应答超时间隔为：{3}\r\n开始时间为: {4}\r\n结束时间为: {5}\r\n最后活动时间为: {6}\r\n所花费时间为: {7} 毫秒
Session.toString.processor = 处理器信息[ID为: {0} ,类型为: {1} ]
Session.toString.errorMessage = 错误信息[长度为: {0} ]为: {1}
Session.toString.exception = 异常信息为: {0}
Session.toString.sourceChannel = 源通道信息为: {0}
Session.toString.source = 起始源信息为: {0}
Session.toString.sourceReqMsg = 源请求报文[长度为: {0} ]为: \r\n{1}
Session.toString.destChannel = 目的通道信息为: {0}
Session.toString.destSource = 目的源信息为: {0}
Session.toString.destReqMsg = 目的请求报文[长度为: {0} ]为: \r\n{1}
Session.toString.destResMsg = 目的回应报文[长度为: {0} ]为: \r\n{1}
Session.toString.sourceResMsg = 源回应报文[长度为: {0} ]为: \r\n{1}
Session.toString.3 = ------------------  结束于 {0} ------------------
Session.getDescriptionByState.unkown = 未知会话状态 {0}
SessionManager.sessionConfig.null = 请先设置会话配置!
SessionManager.gateway.closed = 网关关闭!
SessionManager.session.timeout = 会话超时!会话信息为: \r\n{0}
SessionManager.recordSession.failed = 记录会话信息到数据库失败!
Bootstrap.onceRead.-1 = 命令 {0} 失败!一次读取到-1个字节!远程连接或许已关闭!
Bootstrap.listJar = 添加jar包 {0}
SerialNumberGenerator.no.serialNumber = 没有流水号ID {0} !
CommGateway.start.loadModules = ---->> 加载模块组
CommGateway.loadModules.loadModule = ---->>>> 加载模块,其实现类为: {0}
CommGateway.start.loadChannels = ---->> 加载通道组
CommGateway.start.startEventQueue = ---->> 启动事件处理器
CommGateway.start.startChannels = ---->> 启动通道组
CommGateway.loadChannel = ---->>>> 加载通道,其ID为: {0}
CommGateway.loadChannel.deployPath.notDirectory = 通道部署目录 {0} 不是一个目录!
CommGateway.loadChannel.channelConfigFile.parse.failed = 解析通道(ID为 {0} )配置文件 {1} 失败!异常信息为 {2}
CommGateway.loadChannel.loadLib.failed = 加载通道(ID为 {0} )的相关类 {1} 失败!异常信息为 {2}
CommGateway.createChannelInstance.failed = 创建通道(ID为 {0} )失败!异常信息为 {1}
CommGateway.loadChannel.loadConnector.failed = 加载通道(ID为 {0} )的连接器配置失败!配置文件为 {1}, 异常信息为 {2}
CommGateway.loadChannel.loadMessageBean.failed = 加载通道(ID为 {0} )的MessageBean配置失败!异常信息为 {1}
CommGateway.loadChannel.getCanonicalPath.failed = 获得文件的标准路径失败!
CommGateway.loadChannel.getURL.failed = 创建对象的URL失败!对象路径为 {0}
CommGateway.loadChannel.getMessage.failed = 取Message失败!通道ID为 {0} ,配置文件名为 {1}
CommGateway.loadChannel.messageGroupId.notFound = 没有找到通道(ID为 {0} )配置的<message-bean>/@group-id的值 {1} !请先加载这个组!
CommGateway.loadChannel.loadMapping.failed = 加载通道(ID为 {0} )的映射配置文件 {1} 失败!异常信息为 {2}
CommGateway.loadChannel.createMessageTypeRecognizer.failed = 创建通道(ID为 {0} )的报文类型失败器失败!异常信息为 {1}
CommGateway.loadChannel.createEventHandler.failed = 创建通道(ID为 {0} )的事件处理器(实现类为 {1} )失败!异常信息为 {2}
CommGateway.loadChannel.createRetCodeRecognizer.failed = 创建通道(ID为 {0} )的返回码是识别器失败!异常信息为 {1}
CommGateway.loadChannle.channelId.unkown = 通道(ID为 {1} )配置的通道符号表中对应通道符号 {2} 的通道ID {0} 为未知ID
CommGateway.compileModifiedFiles.compile.error = 编译java文件失败!错误状态为 {0} ,源文件为 {1}
CommGateway.checkChannelProcessors.processorType.unsupport = 无任务功能的网关不支持类型为 {0} 的处理器!通道ID为 {1} ,处理器ID为 {2}
CommGateway.checkChannelProcessors.errorMapping.sourceMessageId.notExist = 错误映射配置(error-mapping)的源MessageId(source-message-id)不存在!Message组ID为 {0} ,MessageId为 {1}
CommGateway.checkChannelProcessors.action.class.notExist = 没有找到Action配置的处理类 {0} !异常信息为 {1}
CommGateway.checkChannelProcessors.action.unsupport = 无任务功能的网关不支持类型为"job"的Action!通道ID为 {0} ,处理器ID为 {1}
CommGateway.checkChannelProcessors.action.processor.notFind = 处理器表中没有找到<action>配置的处理器(ID为 {0} ).
CommGateway.checkChannelProcessors.check.failed = 校验通道(ID为 {0} )的处理器(ID为 {1} )失败!异常信息为 {2}
CommGateway.checkChannelProcessors.sourceMsgId.notExist = {0}的source-message-id不存在!Message组ID为 {1} ,MessageId为 {2}
CommGateway.checkChannelProcessors.destMsgId.notExist = {0}的dest-message-id不存在!Message组ID为 {1} ,MessageId为 {2}
CommGateway.checkChannelProcessors.beanmapping.notExist = {0}的映射规则ID(bean-mapping) {1} 不存在!
CommGateway.loadConfig.deployPath.notDirectory = 通道的部署路径 {0} 不是一个目录!
CommGateway.startChannels.startChannel = ---->>>> 启动通道,其ID为: {0}
CommGateway.startMonitor.searchProcessor.Connect.DataBase.success=连接数据库成功!
CommGateway.startMonitor.searchProcessor=查询数据库失败!异常信息为{0}
CommGateway.startMonitor.command=网关当前收到的命令为：{0}
LongConnectionSocketChannel.receiveResponseHeartbeat.error = 发送心跳包后原路接收应答心跳包出错!异常信息为 {0}
LongConnectionSocketChannel.receiveResponseHeartbeat.success = 发送心跳包后原路接收应答心跳包，内容为 {0}
LongConnectionSocketChannel.sendHeartbeat.success = 发送心跳包内容为{0}
LongConnectionSocketChannel.responseTurnBack.onlyForSend = response-trun-back属性只能配置在发送心跳包配置中!
MQChannel.messageKeyRecognizer.unkownId = 配置文件 {0} 中,未知的报文ID识别器,在通道 {2} 配置的识别器表中找不到该识别器(ID为 {1} )!
Session.toString.sourceReqObj = 源请求对象[类型：{0}]：\r\n{1}
Session.toString.unsupportObjectType = 对象的类型不支持!
Session.toString.destReqObj = 目的请求对象[类型：{0}]：\r\n{1}
Session.toString.destResObj = 目的应答对象[类型：{0}]：\r\n{1}
Session.toString.sourceResObj = 源应答对象[类型：{0}]：\r\n{1}
Session.toString.errorBean = 网关内部错误对象[类型：{0}]：\r\n{1}
Socket.setSendBufferSize.error = setSendBufferSize()出错!当前系统可能不支持设置选项: SO_SNFBUF  
Socket.setReceiveBufferSize.error = setReceiveBufferSize()出错!当前系统可能不支持设置选项: SO_RCVBUF 
CommGateway.loadVariable.error = 加载变量文件出错!异常信息为: {0}
CommGateway.variable.notFound = 变量文件中没有定义对应的变量 {0} !
HTTPServerChannel.createReactor.error = 创建IO监听反应器失败!源通道ID为 {0},异常信息为 {1}
HTTPServerChannel.reactorStart.error = IO监听反应器监听/启动失败!源通道ID为 {0},异常信息为 {1}
HTTPServerChannel.receiveRequest.IOException = (HTTP服务通道)当接收输入数据时产生了IO异常!源通道ID为 {0},异常信息为 {1}
HTTPServerChannel.receiveRequest.HttpException = (HTTP服务通道)当接收输入数据时产生了Http异常!源通道ID为 {0},异常信息为 {1}
HTTPServerChannel.sendResponse.IOException = (HTTP服务通道)当发送输出数据时产生了IO异常!源通道ID为 {0},异常信息为 {1}
HTTPServerChannel.sendResponse.HttpException = (HTTP服务通道)当发送输出数据时产生了Http异常!源通道ID为 {0},异常信息为 {1}
HTTPServerChannel.processRequest.error = (HTTP服务通道)处理请求失败!源通道ID为 {0},异常信息为 {1}
HTTPServerChannel.receiveRequest.noParams = (HTTP服务通道)请求信息非法,没有接收Http报文体!源通道ID为 {0}
HTTPServerChannel.receiveRequest.success = (HTTPServerChannel)请求接收完毕,内容是 {0} 
HTTPServerChannel.listen.failed = (HTTPServerChannel)监听端口失败!源通道ID为 {0}, 异常信息为 {1}
HTTPServerChannel.accept.failed = (HTTPServerChannel)接收端口连接请求失败!源通道ID为 {0}, 异常信息为 {1}
HTTPServerChannel.bind.failed = (HTTPServerChannel)绑定端口和DefaultHttpServerConnection失败!源通道ID为 {0}, 异常信息为 {1}
HTTPServerChannel.sendResponse.failed = (HTTPServerChannel)发送应答消息失败!源通道ID为 {0}, 异常信息为 {1}
FixedLengthNioReader.read.more = (FixedLengthNioReader)报文的固定长度为 {0} ,但是已经读取了 {1} 长度的数据!
DefaultEventHandler.endFlag.false = 当前任务[ID为 {0} , 处理器ID为 {1}]的结束标志为 'BUSINESS_SUCCESS',但是没有配置返回码识别器!
LongConnectionSocketChannel.reader.read.failed = 出现异常!服务连接将重连!异常信息为 {0}
LongConnectionSocketChannel.writer.write.failed = 出现异常!客户连接将重连!异常信息为 {0}
CommGateway.loadConfig.configFileName.notEqual.id = 网关ID[{0}]和网关配置文件名[{1}]不匹配!必须遵守如下规定:网关配置文件名 = "gateway_" + 网关ID + ".xml"
LongConnectionSocketChannel.clientConnection.connected = 连接[{0}]主动连接对方成功!当前时间: {1}
LongConnectionSocketChannel.serverConnection.connected = 连接[{0}]等待对方连接成功!当前时间: {1}
ChannelConfigParser.processor.defaultProcessor.isExist = 默认处理器已存在!
GatewayConfigFile.module.parameter.null = 网关主配置文件中,组件 {0} 的参数 {1} 的值为空!
JobManager.interruptJobSchedule.job.notIn.jobCache = 任务缓存中不存在id为 {0} 的任务!
AbstractMessageFilter.messageException = 网关接收核心报文只要包头，核心报文异常！
MultiLanguageResourceBundle.name.null=name is null
MessageMetadataManager.getMessage.group.null=is null