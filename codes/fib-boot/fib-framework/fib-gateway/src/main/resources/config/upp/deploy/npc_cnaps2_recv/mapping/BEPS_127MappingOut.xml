<?xml version="1.0" encoding="UTF-8" ?>
<message-bean-mapping id="BEPS_127MappingOut" source-type="message-bean" target-type="map">
	<mapping type="value" to="serviceId">receiveBatchPaymentOrder</mapping>
	<mapping type="value" to="batchType">commTIDIn</mapping>
	<mapping type="value" to="communicationEventTypeId">MESSAGE_IN_COMM</mapping>
	<mapping type="value-mapping" from="MsgHeader.MesgType" to="contentMimeTypeId"></mapping><!-- 报文类型代码 例如：beps.008.001.01-->
	<mapping type="value" to="prodCatalogId">BEPS</mapping><!--接收系统号-->	
		<!--验签结果-->
	<mapping type="value-mapping" from="checkEscortFlag" to="checkEscortFlag"/> <!--核押验签结果 -->
	<!-- 报文头 begin -->
	<mapping type="value-mapping" from="MsgHeader.BeginFlag" to="BeginFlag"></mapping><!-- 开始标识 -->
	<mapping type="value-mapping" from="MsgHeader.VersionID" to="VersionID" ></mapping><!--版本 -->
	<mapping type="value-mapping" from="MsgHeader.OrigSender" to="extendMap.origSender"></mapping><!--报文发起人 -->
	<mapping type="value-mapping" from="MsgHeader.OrigSenderSID" to="extendMap.origSenderSID"></mapping><!--发送系统号 -->
	<mapping type="value-mapping" from="MsgHeader.OrigReceiver" to="extendMap.origReceiver"></mapping><!--报文接收人 -->
	<mapping type="value-mapping" from="MsgHeader.OrigReceiverSID" to="extendMap.origReceiverSID"></mapping><!--接收系统号 -->
	<mapping type="value-mapping" from="MsgHeader.OrigSendDate" to="extendMap.origSendDate"></mapping><!--报文发起日期 -->
	<mapping type="value-mapping" from="MsgHeader.OrigSendTime" to="OrigSendTime"></mapping><!--报文发起时间-->
	<mapping type="value-mapping" from="MsgHeader.StructType" to="StructType"></mapping><!-- 格式类型 -->
	<mapping type="value-mapping" from="MsgHeader.MesgType" to="messageTypeId"></mapping><!-- 报文类型代码 -->
	<mapping type="value-mapping" from="MsgHeader.MesgType" to="contentMimeTypeId"></mapping><!-- 报文类型代码 -->
	<mapping type="value-mapping" from="MsgHeader.MesgID" to="extendMap.mesgID"></mapping><!-- 通信级标识号 -->
	<mapping type="value-mapping" from="MsgHeader.MesgRefID" to="extendMap.mesgRefID"></mapping>
	<mapping type="value-mapping" from="MsgHeader.MesgPriority" to="MesgPriority"></mapping>
	<mapping type="value-mapping" from="MsgHeader.MesgDirection" to="MesgDirection"></mapping>
    <mapping type="value-mapping" from="MsgHeader.Reserve" to="Reserve"></mapping>
	<mapping type="value-mapping" from="MsgHeader.EndFlag" to="EndFlag"></mapping><!-- 结束标识 -->
    <!-- 报文头 end-->


	<!-- 报文体内容 -->
	<!-- 批量报文组头 -->
	<mapping type="value-mapping" from="BEPS_127_Out.PKGGrpHdr.MessageIdentification" to="messageIdentification"></mapping><!-- 报文标识号 -->
	<mapping type="value-mapping" from="BEPS_127_Out.PKGGrpHdr.CreationDateTime" to="CreationDateTime"></mapping><!-- 报文发送时间，需要自己写脚本new出个时间 -->
	<mapping type="value-mapping" from="BEPS_127_Out.PKGGrpHdr.InstructingDirectParty" to="instructingParty"></mapping><!-- 发起直接参与机构 -->
	<mapping type="value-mapping" from="BEPS_127_Out.PKGGrpHdr.InstructedDirectParty" to="instructedParty"></mapping><!-- 接收直接参与机构 -->
	<mapping type="value-mapping" from="BEPS_127_Out.PKGGrpHdr.NumberOfTransactions" to="itemNumber"></mapping><!-- 明细业务总笔数 -->
	<mapping type="value-mapping" from="BEPS_127_Out.PKGGrpHdr.CurrencyType" to="CurrencyType"></mapping><!-- 币种 -->
	<mapping type="value-mapping" from="BEPS_127_Out.PKGGrpHdr.ControlSum"	to="itemTotal"></mapping><!-- 明细业务总金额 -->
	<mapping type="value-mapping" from="BEPS_127_Out.PKGGrpHdr.SystemCode" to="systemCode"></mapping>
	<mapping type="value-mapping" from="BEPS_127_Out.PKGGrpHdr.Remark"	to="Remark"></mapping><!-- 备注postscript？？ -->


	<!-- 报文正文其他信息 -->

	<mapping type="value-mapping" from="BEPS_127_Out.PKGReturnLimited" to="returnLimited"/><!-- 包回执期限 -->
	<mapping type="value-mapping" from="BEPS_127_Out.TransmitDate" to="transmitDate"/><!-- 转发日期 -->

	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].TransactionIdentification" to="orderList[].transactionIdentification"></mapping><!-- 明细标识号 -->
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].AgreementNumber" to="orderList[].manyAgreementId"/><!-- 合同协议号 -->
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].Name" to="orderList[].draweeAccName"/><!-- 付款人名称 -->
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].AddressLine" to="orderList[].draweeAddress"/><!-- 付款人地址 -->
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].Identification" to="orderList[].draweeAccNo"/><!-- 付款人账号 -->
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].Issuer" to="orderList[].draweeBankCode"/><!--  付款人开户行行号-->
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].Identification2" to="orderList[].paymentBankCode"/><!-- 付款行行号 -->
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].Identification3" to="orderList[].gatheringBankCode"/><!-- 收款行行号 -->
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].Name2" to="orderList[].payeeAccName"/><!-- 收款人名称 -->
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].AddressLine2" to="orderList[].payeeAddress"/><!--  收款人地址 -->
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].Identification4" to="orderList[].payeeAccNo"/><!-- 收款人账号 -->
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].Issuer2" to="orderList[].payeeBankCode"></mapping><!-- 收款人开户行行号 -->
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].CurrencyType" to="orderList[].currencyCategory"></mapping>
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].Amount" to="orderList[].transactionSum"/><!-- 货币符号、金额 -->
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].Proprietary" to="orderList[].operationType">
		target.put("categoryPurpose",currentValue);
		return currentValue;
	</mapping><!-- 业务类型编码 -->
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].Proprietary2" to="orderList[].operationCategory"/><!-- 业务种类编码 -->
	<mapping type="value-mapping" from="BEPS_127_Out.ccti[].AdditionalInformation" to="orderList[].postscript"/><!-- 附言 -->

	<manual-mapping>
		<![CDATA[
		import java.util.Map;
		import java.util.ArrayList;
		import java.util.List;
		import java.util.HashMap;
	    import java.util.Date;
	   	import java.text.SimpleDateFormat;
		import com.giantstone.cnaps2.messagebean.recv.req.*;

		List orderList = (List)target.get("orderList");
		Map product = new HashMap();
		Map answers = new HashMap();
		for(int i = 0;i<orderList.size();i++){
			Map bean = (Map)orderList.get(i);
			String flag = bean.get("operationType");
			List products = new ArrayList();
			BEPS_127_OutCcti outCcti = (BEPS_127_OutCcti)sourceBean.BEPS_127_Out.getCctiAt(i);
				if("B104".equals(flag)){
					BEPS_ServiceElement127_B104 se = (BEPS_ServiceElement127_B104)outCcti.getCustomerDirectDebitAdditionalInformation();
					answers.put("flowNumber",se.getFslInf().getFlowNumber());
					answers.put("currencyType",se.getFslInf().getCurrencyType());
					answers.put("amount",se.getFslInf().getAmount());
					answers.put("reportCode",se.getFslInf().getReportCode());
					answers.put("receiveCode",se.getFslInf().getReceiveCode());
				    String date = (String)se.getFslInf().getReportForms(); //报表日期
					if(date != null && !"".equals(date)){
						SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date dd = sdf1.parse(date);
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
						String reportForms = sdf2.format(dd);
						answers.put("reportForms",reportForms);
					}
					answers.put("reportNumber",se.getFslInf().getReportNumber());
					answers.put("budgetLevel",se.getBudgetLevel());
					answers.put("indicator",se.getIndicator());
					answers.put("budgetType",se.getBudgetType());
					answers.put("numberOfTransactions",se.getNumberOfTransactions());

					List TransactionsDetails = se.getTransactionsDetails();
					List table_01_01 = new ArrayList();
					for(int i = 0; i < TransactionsDetails.size(); i++){
						BEPS_ServiceElement127_B104TransactionsDetails beps = (BEPS_ServiceElement127_B104TransactionsDetails)TransactionsDetails.get(i);
						Map map = new HashMap();
						map.put("typeCode",beps.getTypeCode());
						map.put("subjectCode",beps.getSubjectCode());
						map.put("currencyType",beps.getCurrencyType());
						map.put("amount",beps.getAmount());
						table_01_01.add(map);
					}
					answers.put("transactionsDetails",table_01_01);
					product.put("answers",answers);
				    products.add(product);
					bean.put("products",products);
				}else if("B308".equals(flag)){
									BEPS_ServiceElement127_B308 se = (BEPS_ServiceElement127_B308)outCcti.getCustomerDirectDebitAdditionalInformation();
					String date = se.getIssuedate(); //出票日期
					if(date != null && !"".equals(date)){
						SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date dd = sdf1.parse(date);
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
						String issuedate = sdf2.format(dd);
						answers.put("issuedate",issuedate);
						answers.put("billViseDate",issuedate);
					}
					String date1 = se.getPayDate(); //提示付款日期
					if(date1 != null && !"".equals(date1)){
						SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date dd = sdf1.parse(date1);
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
						String payDate = sdf2.format(dd);
						answers.put("promptDate",payDate);
					}
					answers.put("billViseNo",se.getNumber());
					answers.put("billNo",se.getNumber());
					answers.put("paymentPassword",se.getPaymentPassword());	
					answers.put("voucherPwd",se.getPaymentPassword());
					answers.put("purpose",se.getPurpose());
					answers.put("numberOfEndorser",se.getNumberOfEndorser());

					List EndorsorDetail = se.getEndorsorDetail();
					List table_01_01 = new ArrayList();
					for(int i = 0; i < EndorsorDetail.size(); i++){
						BEPS_ServiceElement127_B308EndorsorDetail beps = (BEPS_ServiceElement127_B308EndorsorDetail)EndorsorDetail.get(i);
						Map map = new HashMap();
						map.put("name",beps.getName());
						table_01_01.add(map);
					}
					answers.put("imageType",se.getImageType());
					answers.put("imageFrontLength",se.getImageFrontLength());
					answers.put("imageFrontData",se.getImageFrontData());
					answers.put("imageBackLength",se.getImageBackLength());
					answers.put("imageBackData",se.getImageBackData());
					answers.put("endorsorDetail", table_01_01);
					product.put("answers",answers);
				    products.add(product);
					bean.put("products",products);
				}else if("B309".equals(flag)){
					BEPS_ServiceElement127_B309 se = (BEPS_ServiceElement127_B309)outCcti.getCustomerDirectDebitAdditionalInformation();
					String date = se.getIssuedate(); //出票日期
					if(date != null && !"".equals(date)){
						SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date dd = sdf1.parse(date);
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
						String issuedate = sdf2.format(dd);
						answers.put("billViseDate",issuedate);
					}
					answers.put("parAmount",se.getAmount());//出票金额
					String date1 = se.getPayDate(); //提示付款日期
					if(date1 != null && !"".equals(date1)){
						SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date dd = sdf1.parse(date1);
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
						String payDate = sdf2.format(dd);
						answers.put("promptDate",payDate);
					}
					String date2 = se.getMaturityDate(); //票据到期日期
					if(date2 != null && !"".equals(date2)){
						SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date dd = sdf1.parse(date1);
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
						String payDate = sdf2.format(dd);
						answers.put("voucherFallInDate",payDate);
					}
					String date3 = se.getAcceptanceDate(); //承兑日期
					if(date3 != null && !"".equals(date3)){
						SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date dd = sdf1.parse(date1);
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
						String payDate = sdf2.format(dd);
						answers.put("acceptDate",payDate);
					}
					answers.put("billNo",se.getNumber());
					answers.put("voucherPwd",se.getPaymentPassword());
					answers.put("secretStamp",se.getSeal());//票据密押
					answers.put("acceptProtocolNo",se.getAcceptanceagreementNumber());//承兑协议编号
					answers.put("accepter",se.getAcceptanceName());//承兑人
					answers.put("applyName",se.getApplyName());//申请人名称
					answers.put("applyAccount",se.getApplyAccount());//申请人账号
					answers.put("arawerName",se.getDrawerName());//出票人全称
					answers.put("remitterAccNo",se.getDrawerAccount());//出票人账号
					answers.put("tradePactNo",se.getTransactionContractNumber());//交易合同号码
					answers.put("usering",se.getPurpose());//用途
					answers.put("numberOfEndorser",se.getNumberOfEndorser());//被背书人数
					
					//背书人清单
					List EndorsorDetail = se.getEndorsorDetail();

					if(EndorsorDetail != null){
						//如果被书人人数大于0，即原收款人名称作为付款人名称，传给核心，如果不大于0，此字段部需要传，已和秦洁确认。传了就错了。
						int numberOfEndorser = EndorsorDetail.size();
						String oldPayeeAccName = "";
						if(!"0".equals(numberOfEndorser)){
							oldPayeeAccName = (String)se.getOriginalCreditorName();	
							answers.put("oldPayeeAccName",oldPayeeAccName);//原收款人名称,因小额传给平台answers中的数据从批次明细表中获取
						}

					}

					//因核心校验本汇票信息时需要前发行行号，在此映射
					String paymentBankCode = (String)sourceBean.BEPS_127_Out.getCctiAt(i).getIdentification2();	
					answers.put("signBankCode",paymentBankCode);
	
					List table_01_01 = new ArrayList();
					for(int i = 0; i < EndorsorDetail.size(); i++){
						BEPS_ServiceElement127_B309EndorsorDetail beps = (BEPS_ServiceElement127_B309EndorsorDetail)EndorsorDetail.get(i);
						Map map = new HashMap();
						map.put("name",beps.getName());
						table_01_01.add(map);
					}
					answers.put("imageType",se.getImageType());
					answers.put("imageFrontLength",se.getImageFrontLength());
					answers.put("imageFrontData",se.getImageFrontData());
					answers.put("imageBackLength",se.getImageBackLength());
					answers.put("imageBackData",se.getImageBackData());
					answers.put("endorsorList", table_01_01);
					product.put("answers",answers);
				    products.add(product);
					bean.put("products",products);					
				}else if("B310".equals(flag)){
					BEPS_ServiceElement127_B310 se = (BEPS_ServiceElement127_B310)outCcti.getCustomerDirectDebitAdditionalInformation();
					String date = se.getIssuedate(); //出票日期
					if(date != null && !"".equals(date)){
						SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date dd = sdf1.parse(date);
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
						String issuedate = sdf2.format(dd);
						answers.put("billViseDate",issuedate);
					}
					answers.put("parAmount",se.getAmount());//出票金额
					String date1 = se.getPayDate(); //提示付款日期
					if(date1 != null && !"".equals(date1)){
						SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date dd = sdf1.parse(date1);
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
						String payDate = sdf2.format(dd);
						answers.put("promptDate",payDate);
					}
					String date2 = se.getMaturityDate(); //票据到期日期
					if(date2 != null && !"".equals(date2)){
						SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date dd = sdf1.parse(date1);
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
						String payDate = sdf2.format(dd);
						answers.put("voucherFallInDate",payDate);
					}
					String date3 = se.getAcceptanceDate(); //承兑日期
					if(date3 != null && !"".equals(date3)){
						SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date dd = sdf1.parse(date1);
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
						String payDate = sdf2.format(dd);
						answers.put("acceptDate",payDate);
					}
					answers.put("billNo",se.getNumber());
					answers.put("voucherPwd",se.getPaymentPassword());
					answers.put("secretStamp",se.getSeal());//票据密押
					answers.put("acceptProtocolNo",se.getAcceptanceagreementNumber());//承兑协议编号
					answers.put("accepter",se.getAcceptanceName());//承兑人
					answers.put("applyName",se.getApplyName());//申请人名称
					answers.put("applyAccount",se.getApplyAccount());//申请人账号
					answers.put("arawerName",se.getDrawerName());//出票人全称
					answers.put("remitterAccNo",se.getDrawerAccount());//出票人账号
					answers.put("tradePactNo",se.getTransactionContractNumber());//交易合同号码
					answers.put("usering",se.getPurpose());//用途
					answers.put("numberOfEndorser",se.getNumberOfEndorser());//被背书人数
					answers.put("oldPayeeAccName",se.getOriginalCreditorName());//原收款人名称
					//背书人清单
					List EndorsorDetail = se.getEndorsorDetail();

					if(EndorsorDetail != null){
						//如果被书人人数大于0，即原收款人名称作为付款人名称，传给核心，如果不大于0，此字段部需要传，已和秦洁确认。传了就错了。
						int numberOfEndorser = EndorsorDetail.size();
						String oldPayeeAccName = "";
						if(!"0".equals(numberOfEndorser)){
							oldPayeeAccName = (String)se.getOriginalCreditorName();	
							answers.put("oldPayeeAccName",oldPayeeAccName);//原收款人名称,因小额传给平台answers中的数据从批次明细表中获取
						}

					}

					//因核心校验本汇票信息时需要前发行行号，在此映射
					String paymentBankCode = (String)sourceBean.BEPS_127_Out.getCctiAt(i).getIdentification2();	
					answers.put("signBankCode",paymentBankCode);


					List table_01_01 = new ArrayList();
					for(int i = 0; i < EndorsorDetail.size(); i++){
						BEPS_ServiceElement127_B310EndorsorDetail beps = (BEPS_ServiceElement127_B310EndorsorDetail)EndorsorDetail.get(i);
						Map map = new HashMap();
						map.put("name",beps.getName());
						table_01_01.add(map);
					}
					answers.put("imageType",se.getImageType());
					answers.put("imageFrontLength",se.getImageFrontLength());
					answers.put("imageFrontData",se.getImageFrontData());
					answers.put("imageBackLength",se.getImageBackLength());
					answers.put("imageBackData",se.getImageBackData());
					answers.put("endorsorList", table_01_01);
					product.put("answers",answers);
				    products.add(product);
					bean.put("products",products);
				}else if("B311".equals(flag)){
					BEPS_ServiceElement127_B311 se = (BEPS_ServiceElement127_B311)outCcti.getCustomerDirectDebitAdditionalInformation();
					String date = se.getIssuedate(); //出票日期
					if(date != null && !"".equals(date)){
						SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date dd = sdf1.parse(date);
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
						String issuedate = sdf2.format(dd);
						answers.put("billViseDate",issuedate);
					}
					answers.put("parAmount",se.getAmount());//出票金额
					String date1 = se.getPayDate(); //提示付款日期
					if(date1 != null && !"".equals(date1)){
						SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date dd = sdf1.parse(date1);
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
						String payDate = sdf2.format(dd);
						answers.put("promptDate",payDate);
					}
					String date2 = se.getMaturityDate(); //票据到期日期
					if(date2 != null && !"".equals(date2)){
						SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date dd = sdf1.parse(date1);
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
						String payDate = sdf2.format(dd);
						answers.put("voucherFallInDate",payDate);
					}
					String date3 = se.getAcceptanceDate(); //承兑日期
					if(date3 != null && !"".equals(date3)){
						SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date dd = sdf1.parse(date1);
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
						String payDate = sdf2.format(dd);
						answers.put("acceptDate",payDate);
					}
					answers.put("billNo",se.getNumber());
					answers.put("voucherPwd",se.getPaymentPassword());
					answers.put("secretStamp",se.getSeal());//票据密押
					answers.put("acceptProtocolNo",se.getAcceptanceagreementNumber());//承兑协议编号
					answers.put("accepter",se.getAcceptanceName());//承兑人
					answers.put("applyName",se.getApplyName());//申请人名称
					answers.put("applyAccount",se.getApplyAccount());//申请人账号
					answers.put("arawerName",se.getDrawerName());//出票人全称
					answers.put("remitterAccNo",se.getDrawerAccount());//出票人账号
					answers.put("tradePactNo",se.getTransactionContractNumber());//交易合同号码
					answers.put("usering",se.getPurpose());//用途
					answers.put("numberOfEndorser",se.getNumberOfEndorser());//被背书人数
					answers.put("summary",se.getOriginalCreditorName());//原收款人名称，因
					//背书人清单
					List EndorsorDetail = se.getEndorsorDetail();
					
					if(EndorsorDetail != null){
						//如果被书人人数大于0，即原收款人名称作为付款人名称，传给核心，如果不大于0，此字段部需要传，已和秦洁确认。传了就错了。
						int numberOfEndorser = EndorsorDetail.size();
						String oldPayeeAccName = "";
						if(!"0".equals(numberOfEndorser)){
							oldPayeeAccName = (String)se.getOriginalCreditorName();	
							answers.put("oldPayeeAccName",oldPayeeAccName);//原收款人名称,因小额传给平台answers中的数据从批次明细表中获取
						}

					}

					//因核心校验本汇票信息时需要前发行行号，在此映射
					String paymentBankCode = (String)sourceBean.BEPS_127_Out.getCctiAt(i).getIdentification2();	
					answers.put("signBankCode",paymentBankCode);


					List table_01_01 = new ArrayList();
					for(int i = 0; i < EndorsorDetail.size(); i++){
						BEPS_ServiceElement127_B311EndorsorDetail beps = (BEPS_ServiceElement127_B311EndorsorDetail)EndorsorDetail.get(i);
						Map map = new HashMap();
						map.put("name",beps.getName());
						table_01_01.add(map);
					}
					answers.put("imageType",se.getImageType());
					answers.put("imageFrontLength",se.getImageFrontLength());
					answers.put("imageFrontData",se.getImageFrontData());
					answers.put("imageBackLength",se.getImageBackLength());
					answers.put("imageBackData",se.getImageBackData());
					answers.put("endorsorList", table_01_01);
					product.put("answers",answers);
				    products.add(product);
					bean.put("products",products);
				}
			}
			target.put("orderList", orderList);
		]]>
	</manual-mapping>

  </message-bean-mapping>
